"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rxjs = require("rxjs");

var _axios = _interopRequireDefault(require("axios"));

var _axiosCancel = _interopRequireDefault(require("axios-cancel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// adds cancel prototype method
(0, _axiosCancel.default)(_axios.default); // accepted methods by the client

var ACCEPTED_METHODS = ['GET', 'POST', 'PUT', 'DELETE'];
/**
 * @param url - the url of the request
 * @param options - object that contains the method, payload and headers
 */

var request = function request(url, options) {
  var method = options.method,
      data = options.data,
      headers = options.headers,
      returnPromise = options.returnPromise;
  data = data || {};
  headers = headers || {};
  method = method || 'GET'; // validate if a path is specified

  if (!url) {
    throw new Error('No path has been provided');
  }

  if (options && _typeof(options) === 'object') {
    // validate if options are provided
    // validate if the method is valid
    if (ACCEPTED_METHODS.indexOf(method.toUpperCase()) === -1) {
      throw new Error("Invalid method, method must be ".concat(ACCEPTED_METHODS.join(', ')));
    }
  }

  var result; // create sample request id

  var requestId = "".concat(Math.random(), "-xhr-id"); // XHR complete pointer

  var completed = false; // config object to be sent to the request

  var config = {
    url: url,
    method: method,
    headers: headers,
    requestId: requestId
  };

  if (returnPromise) {
    result = _axios.default.request(config);
  } else {
    result = _rxjs.Observable.create(function (observer) {
      _axios.default.request(config).then(function (response) {
        observer.next(response);
        completed = true;
        observer.complete();
      }).catch(function (error) {
        observer.error(error);
        completed = true;
      }); // teardown function to be called when ww call unsubscribe() on the observable


      return function () {
        if (completed === false) {
          // cancel XHR
          _axios.default.cancel(requestId);

          completed = true;
        }
      };
    });
  }

  return result;
};

var _default = request;
exports.default = _default;
module.exports = exports["default"];