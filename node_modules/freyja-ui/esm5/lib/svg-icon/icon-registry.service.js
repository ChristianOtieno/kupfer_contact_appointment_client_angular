import { Injectable, Optional, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { of as observableOf } from 'rxjs';
import { finalize, map, share, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/platform-browser";
var CLOUD_CDN_URL = 'https://storage.googleapis.com/svgicons';
var SvgIcon = /** @class */ (function () {
    function SvgIcon(data) {
        if (!!data.nodeName) {
            this.svgElement = data;
        }
        else {
            this.url = data;
        }
    }
    return SvgIcon;
}());
var IconRegistryService = /** @class */ (function () {
    function IconRegistryService(httpClient, sanitizer) {
        this.httpClient = httpClient;
        this.sanitizer = sanitizer;
        this.svgIcons = new Map();
        this.inProgressUrlFetches = new Map();
    }
    IconRegistryService.prototype.loadSvgIconFromConfig = function (config) {
        var _this = this;
        return this.fetchUrl(config.url)
            .pipe(map(function (svgText) { return _this.createSvgElementForSingleIcon(svgText); }));
    };
    IconRegistryService.prototype.createSvgElementForSingleIcon = function (responseText) {
        var svg = this.svgElementFromString(responseText);
        svg.setAttribute('fit', '');
        svg.setAttribute('height', '100%');
        svg.setAttribute('width', '100%');
        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        svg.setAttribute('focusable', 'false');
        return svg;
    };
    IconRegistryService.prototype.svgElementFromString = function (str) {
        var div = document.createElement('DIV');
        div.innerHTML = str;
        var svg = div.querySelector('svg');
        if (!svg) {
            throw Error('<svg> tag not found');
        }
        return svg;
    };
    IconRegistryService.prototype.fetchUrl = function (safeUrl) {
        var _this = this;
        var url = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
        var inProgressFetch = this.inProgressUrlFetches.get(url);
        if (inProgressFetch) {
            return inProgressFetch;
        }
        var req = this.httpClient.get(url, {
            responseType: 'text', headers: new HttpHeaders({
                'Access-Control-Allow-Origin': '*'
            })
        }).pipe(finalize(function () { return _this.inProgressUrlFetches.delete(url); }), share());
        this.inProgressUrlFetches.set(url, req);
        return req;
    };
    IconRegistryService.prototype.addSvgIcon = function (iconName) {
        var url = this.sanitizer.bypassSecurityTrustResourceUrl(CLOUD_CDN_URL + "/" + iconName + ".svg");
        this.svgIcons.set(iconName, new SvgIcon(url));
        return this.getNamedSvgIcon(iconName);
    };
    IconRegistryService.prototype.getNamedSvgIcon = function (name) {
        var config = this.svgIcons.get(name);
        if (config) {
            if (config.svgElement) {
                return observableOf(cloneSvg(config.svgElement));
            }
            else {
                return this.loadSvgIconFromConfig(config).pipe(tap(function (svg) { return config.svgElement = svg; }), map(function (svg) { return cloneSvg(svg); }));
            }
        }
    };
    IconRegistryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IconRegistryService.ctorParameters = function () { return [
        { type: HttpClient, decorators: [{ type: Optional }] },
        { type: DomSanitizer }
    ]; };
    IconRegistryService.ngInjectableDef = i0.defineInjectable({ factory: function IconRegistryService_Factory() { return new IconRegistryService(i0.inject(i1.HttpClient, 8), i0.inject(i2.DomSanitizer)); }, token: IconRegistryService, providedIn: "root" });
    return IconRegistryService;
}());
export { IconRegistryService };
function cloneSvg(svg) {
    return svg.cloneNode(true);
}
//# sourceMappingURL=data:application/json;base64,