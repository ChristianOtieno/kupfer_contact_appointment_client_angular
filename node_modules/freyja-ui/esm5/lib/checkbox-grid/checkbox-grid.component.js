import { Component, Input, EventEmitter, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
var CheckboxGridComponent = /** @class */ (function () {
    function CheckboxGridComponent() {
        this.inline = true;
        this.noPadding = false;
        this.noMargin = false;
        this.smallText = false;
        this.checkboxClicked = new EventEmitter();
    }
    CheckboxGridComponent.prototype.ngOnChanges = function (changes) {
        this.makeCheckboxes();
    };
    /**
     * @description Create the internally used array of checkboxes
     */
    CheckboxGridComponent.prototype.makeCheckboxes = function () {
        if (this.checkboxGroup) {
            this.checkboxes = this.checkboxGroup.map(function (item, index) {
                return {
                    index: index,
                    id: item.value + "_" + index,
                    label: item.label,
                    value: item.value,
                    checked: item.checked || false,
                };
            });
        }
    };
    /**
     * @description Notify the parent that a value has changed
     * @param checked the new checked value of the checkbox
     * @param item the internal checkbox model
     */
    CheckboxGridComponent.prototype.updateChecked = function (checked, item) {
        if (item.disabled) {
            return;
        }
        item.checked = checked;
        var toggledItem = this.checkboxGroup[item.index];
        if (toggledItem.hasOwnProperty('checked')) {
            toggledItem.checked = item.checked;
        }
        this.checkboxClicked.emit(toggledItem);
    };
    CheckboxGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-checkbox-grid',
                    template: "<h2 class=\"title\">Main Title</h2>\n<div class=\"grid-form__card-body card-body\" [ngClass]=\"{'no-padding': noPadding, 'no-margin': noMargin, 'small-text': smallText}\">\n  <div *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\n    <div *ngFor=\"let checkbox of checkboxes;\" class=\"form-check\" [ngClass]=\"{'form-check--inline': inline}\">\n      <div class=\"custom-control custom-checkbox\">\n        <input\n          type=\"checkbox\"\n          class=\"custom-control-input\"\n          [value]=\"checkbox.value\"\n          [ngModel]=\"checkbox.checked\"\n          (ngModelChange)=\"updateChecked($event, checkbox)\"\n          [disabled]=\"checkbox.disabled\"\n          [attr.id]=\"checkbox.id\"\n          [attr.name]=\"checkbox.id\" />\n        <label class=\"custom-control-label\" [attr.for]=\"checkbox.id\">{{checkbox.label}}</label>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"!formGroup\" [ngClass]=\"{'no-border': noBorder}\">\n    <div *ngFor=\"let checkbox of checkboxes; \" class=\"form-check\" [ngClass]=\"{'form-check--inline': inline}\">\n      <div class=\"custom-control custom-checkbox\">\n        <input\n          type=\"checkbox\"\n          class=\"custom-control-input\"\n          [value]=\"checkbox.value\"\n          [ngModel]=\"checkbox.checked\"\n          (ngModelChange)=\"updateChecked($event, checkbox)\"\n          [disabled]=\"checkbox.disabled\"\n          [attr.id]=\"checkbox.id\"\n          [attr.name]=\"checkbox.id\" />\n        <label class=\"custom-control-label\" [attr.for]=\"checkbox.id\">{{checkbox.label}}</label>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}"]
                }] }
    ];
    /** @nocollapse */
    CheckboxGridComponent.ctorParameters = function () { return []; };
    CheckboxGridComponent.propDecorators = {
        title: [{ type: Input }],
        checkboxGroup: [{ type: Input }],
        inline: [{ type: Input }],
        noPadding: [{ type: Input }],
        noMargin: [{ type: Input }],
        smallText: [{ type: Input }],
        noBorder: [{ type: Input }],
        formGroup: [{ type: Input }],
        checkboxClicked: [{ type: Output }]
    };
    return CheckboxGridComponent;
}());
export { CheckboxGridComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9mcmV5amEtdWkvIiwic291cmNlcyI6WyJsaWIvY2hlY2tib3gtZ3JpZC9jaGVja2JveC1ncmlkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7SUFzQkU7UUFiUyxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2QsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFHakIsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBTy9CLENBQUM7SUFFakIsMkNBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSyw4Q0FBYyxHQUF0QjtRQUNFLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxFQUFFLEtBQUs7Z0JBQ25ELE9BQU87b0JBQ0wsS0FBSyxFQUFFLEtBQUs7b0JBQ1osRUFBRSxFQUFLLElBQUksQ0FBQyxLQUFLLFNBQUksS0FBTztvQkFDNUIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO29CQUNqQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7b0JBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUs7aUJBQy9CLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSw2Q0FBYSxHQUFwQixVQUFxQixPQUFPLEVBQUUsSUFBSTtRQUNoQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3pDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7O2dCQTVERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIscW1EQUE2Qzs7aUJBRTlDOzs7Ozt3QkFHRSxLQUFLO2dDQUNMLEtBQUs7eUJBQ0wsS0FBSzs0QkFDTCxLQUFLOzJCQUNMLEtBQUs7NEJBQ0wsS0FBSzsyQkFDTCxLQUFLOzRCQUNMLEtBQUs7a0NBQ0wsTUFBTTs7SUE4Q1QsNEJBQUM7Q0FBQSxBQTdERCxJQTZEQztTQXhEWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZqLWNoZWNrYm94LWdyaWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3gtZ3JpZC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2NoZWNrYm94LWdyaWQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveEdyaWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNoZWNrYm94R3JvdXA6IGFueVtdO1xuICBASW5wdXQoKSBpbmxpbmUgPSB0cnVlO1xuICBASW5wdXQoKSBub1BhZGRpbmcgPSBmYWxzZTtcbiAgQElucHV0KCkgbm9NYXJnaW4gPSBmYWxzZTtcbiAgQElucHV0KCkgc21hbGxUZXh0ID0gZmFsc2U7XG4gIEBJbnB1dCgpIG5vQm9yZGVyOiBib29sZWFuO1xuICBASW5wdXQoKSBmb3JtR3JvdXA6IEZvcm1Hcm91cDtcbiAgQE91dHB1dCgpIGNoZWNrYm94Q2xpY2tlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIEludGVybmFsbHkgdXNlZCBjaGVja2JveCBkYXRhXG4gICAqL1xuICBwdWJsaWMgY2hlY2tib3hlczogYW55W107XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5tYWtlQ2hlY2tib3hlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBDcmVhdGUgdGhlIGludGVybmFsbHkgdXNlZCBhcnJheSBvZiBjaGVja2JveGVzXG4gICAqL1xuICBwcml2YXRlIG1ha2VDaGVja2JveGVzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoZWNrYm94R3JvdXApIHtcbiAgICAgIHRoaXMuY2hlY2tib3hlcyA9IHRoaXMuY2hlY2tib3hHcm91cC5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIGlkOiBgJHtpdGVtLnZhbHVlfV8ke2luZGV4fWAsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgY2hlY2tlZDogaXRlbS5jaGVja2VkIHx8IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBOb3RpZnkgdGhlIHBhcmVudCB0aGF0IGEgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICogQHBhcmFtIGNoZWNrZWQgdGhlIG5ldyBjaGVja2VkIHZhbHVlIG9mIHRoZSBjaGVja2JveFxuICAgKiBAcGFyYW0gaXRlbSB0aGUgaW50ZXJuYWwgY2hlY2tib3ggbW9kZWxcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVDaGVja2VkKGNoZWNrZWQsIGl0ZW0pOiB2b2lkIHtcbiAgICBpZiAoaXRlbS5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLmNoZWNrZWQgPSBjaGVja2VkO1xuICAgIGNvbnN0IHRvZ2dsZWRJdGVtID0gdGhpcy5jaGVja2JveEdyb3VwW2l0ZW0uaW5kZXhdO1xuICAgIGlmICh0b2dnbGVkSXRlbS5oYXNPd25Qcm9wZXJ0eSgnY2hlY2tlZCcpKSB7XG4gICAgICB0b2dnbGVkSXRlbS5jaGVja2VkID0gaXRlbS5jaGVja2VkO1xuICAgIH1cbiAgICB0aGlzLmNoZWNrYm94Q2xpY2tlZC5lbWl0KHRvZ2dsZWRJdGVtKTtcbiAgfVxufVxuIl19