import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var DatePickerService = /** @class */ (function () {
    function DatePickerService() {
        this.getProgramDirectEntryCalendarStartDate = new Subject();
        this.getEditProgramCalendarStartDate = new Subject();
        this.getEditActivityCalendarStartDate = new Subject();
        this.getApprovalCalendarStartDate = new Subject();
        this.getCreateMilestoneCalendarStartDate = new Subject();
    }
    //  Method set disableUntil Start date value until yesterday
    DatePickerService.prototype.disableUntil = function (options) {
        var d = new Date();
        d.setDate(d.getDate() - 1);
        var copy = this.getCopyOfOptions(options);
        copy.disableUntil = {
            year: d.getFullYear(),
            month: d.getMonth() + 1,
            day: d.getDate()
        };
        var myOptions = copy;
        return myOptions;
    };
    // Returns copy of myOptions for the Date
    DatePickerService.prototype.getCopyOfOptions = function (options) {
        return JSON.parse(JSON.stringify(options));
    };
    DatePickerService.prototype.getEndDateCalendar = function (date, options) {
        var myEndDateOptions = this.getCopyOfOptions(options);
        myEndDateOptions.disableUntil = date;
        myEndDateOptions.todayBtnTxt = 'End Date';
        return myEndDateOptions;
    };
    DatePickerService.prototype.getStartDate = function (date, form) {
        try {
            var formatedDate = {
                year: date.split('.')[2],
                month: date.split('.')[1],
                day: date.split('.')[0]
            };
            if (form === 'edit_program_form') {
                this.editProgramSartDate = formatedDate;
                this.getEditProgramCalendarStartDate.next(this.editProgramSartDate);
            }
            if (form === 'edit_activity_form') {
                this.editActivitySartDate = formatedDate;
                this.getEditActivityCalendarStartDate.next(this.editActivitySartDate);
            }
            if (form === 'approval_form') {
                this.approvalStartDate = formatedDate;
                this.getApprovalCalendarStartDate.next(this.approvalStartDate);
            }
            if (form === 'create_milestone_form') {
                this.createMilestoneStartDate = formatedDate;
                this.getCreateMilestoneCalendarStartDate.next(this.createMilestoneStartDate);
            }
            if (form === 'program_direct_entry_form') {
                this.programDirectEntryStartDate = formatedDate;
                this.getProgramDirectEntryCalendarStartDate.next(this.programDirectEntryStartDate);
            }
            return true;
        }
        catch (error) {
            return false;
        }
    };
    DatePickerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatePickerService.ctorParameters = function () { return []; };
    return DatePickerService;
}());
export { DatePickerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2ZyZXlqYS11aS8iLCJzb3VyY2VzIjpbImxpYi9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUcvQjtJQWNFO1FBTkEsMkNBQXNDLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDMUUsb0NBQStCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDbkUscUNBQWdDLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDcEUsaUNBQTRCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDaEUsd0NBQW1DLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7SUFFdkQsQ0FBQztJQUVqQiw0REFBNEQ7SUFDNUQsd0NBQVksR0FBWixVQUFhLE9BQU87UUFDbEIsSUFBTSxDQUFDLEdBQVEsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNsQixJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUNyQixLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7WUFDdkIsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUU7U0FDakIsQ0FBQztRQUNGLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQztRQUV2QixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQseUNBQXlDO0lBQ3pDLDRDQUFnQixHQUFoQixVQUFpQixPQUFPO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLDhDQUFrQixHQUF6QixVQUEwQixJQUFJLEVBQUUsT0FBTztRQUNyQyxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RCxnQkFBZ0IsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3JDLGdCQUFnQixDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDMUMsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0lBRUQsd0NBQVksR0FBWixVQUFhLElBQUksRUFBRSxJQUFJO1FBQ3JCLElBQUk7WUFDRixJQUFNLFlBQVksR0FBRztnQkFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QixDQUFDO1lBQ0YsSUFBSSxJQUFJLEtBQUssbUJBQW1CLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxZQUFZLENBQUM7Z0JBQ3hDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDckU7WUFDRCxJQUFJLElBQUksS0FBSyxvQkFBb0IsRUFBRTtnQkFDakMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFlBQVksQ0FBQztnQkFDekMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQzthQUN2RTtZQUNELElBQUksSUFBSSxLQUFLLGVBQWUsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQztnQkFDdEMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUNoRTtZQUNELElBQUksSUFBSSxLQUFLLHVCQUF1QixFQUFFO2dCQUNwQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsWUFBWSxDQUFDO2dCQUM3QyxJQUFJLENBQUMsbUNBQW1DLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQzlFO1lBQ0QsSUFBSSxJQUFJLEtBQUssMkJBQTJCLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQywyQkFBMkIsR0FBRyxZQUFZLENBQUM7Z0JBQ2hELElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7YUFDcEY7WUFFRCxPQUFPLElBQUksQ0FBQztTQUViO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQzs7Z0JBNUVGLFVBQVU7Ozs7SUE2RVgsd0JBQUM7Q0FBQSxBQTdFRCxJQTZFQztTQTVFWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElOZ3hNeURwT3B0aW9ucyB9IGZyb20gJ25neC1teWRhdGVwaWNrZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlclNlcnZpY2Uge1xuXG4gIGVkaXRQcm9ncmFtU2FydERhdGU6IGFueTtcbiAgZWRpdEFjdGl2aXR5U2FydERhdGU6IGFueTtcbiAgYXBwcm92YWxTdGFydERhdGU6IGFueTtcbiAgY3JlYXRlTWlsZXN0b25lU3RhcnREYXRlOiBhbnk7XG4gIHByb2dyYW1EaXJlY3RFbnRyeVN0YXJ0RGF0ZTogYW55O1xuICBnZXRQcm9ncmFtRGlyZWN0RW50cnlDYWxlbmRhclN0YXJ0RGF0ZTogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICBnZXRFZGl0UHJvZ3JhbUNhbGVuZGFyU3RhcnREYXRlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIGdldEVkaXRBY3Rpdml0eUNhbGVuZGFyU3RhcnREYXRlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIGdldEFwcHJvdmFsQ2FsZW5kYXJTdGFydERhdGU6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgZ2V0Q3JlYXRlTWlsZXN0b25lQ2FsZW5kYXJTdGFydERhdGU6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8vICBNZXRob2Qgc2V0IGRpc2FibGVVbnRpbCBTdGFydCBkYXRlIHZhbHVlIHVudGlsIHllc3RlcmRheVxuICBkaXNhYmxlVW50aWwob3B0aW9ucykge1xuICAgIGNvbnN0IGQ6IGFueSA9IG5ldyBEYXRlKCk7XG4gICAgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpIC0gMSk7XG4gICAgY29uc3QgY29weSA9IHRoaXMuZ2V0Q29weU9mT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb3B5LmRpc2FibGVVbnRpbCA9IHtcbiAgICAgIHllYXI6IGQuZ2V0RnVsbFllYXIoKSxcbiAgICAgIG1vbnRoOiBkLmdldE1vbnRoKCkgKyAxLFxuICAgICAgZGF5OiBkLmdldERhdGUoKVxuICAgIH07XG4gICAgY29uc3QgbXlPcHRpb25zID0gY29weTtcblxuICAgIHJldHVybiBteU9wdGlvbnM7XG4gIH1cblxuICAvLyBSZXR1cm5zIGNvcHkgb2YgbXlPcHRpb25zIGZvciB0aGUgRGF0ZVxuICBnZXRDb3B5T2ZPcHRpb25zKG9wdGlvbnMpOiBJTmd4TXlEcE9wdGlvbnMge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRFbmREYXRlQ2FsZW5kYXIoZGF0ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG15RW5kRGF0ZU9wdGlvbnMgPSB0aGlzLmdldENvcHlPZk9wdGlvbnMob3B0aW9ucyk7XG4gICAgbXlFbmREYXRlT3B0aW9ucy5kaXNhYmxlVW50aWwgPSBkYXRlO1xuICAgIG15RW5kRGF0ZU9wdGlvbnMudG9kYXlCdG5UeHQgPSAnRW5kIERhdGUnO1xuICAgIHJldHVybiBteUVuZERhdGVPcHRpb25zO1xuICB9XG5cbiAgZ2V0U3RhcnREYXRlKGRhdGUsIGZvcm0pOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZm9ybWF0ZWREYXRlID0ge1xuICAgICAgICB5ZWFyOiBkYXRlLnNwbGl0KCcuJylbMl0sXG4gICAgICAgIG1vbnRoOiBkYXRlLnNwbGl0KCcuJylbMV0sXG4gICAgICAgIGRheTogZGF0ZS5zcGxpdCgnLicpWzBdXG4gICAgICB9O1xuICAgICAgaWYgKGZvcm0gPT09ICdlZGl0X3Byb2dyYW1fZm9ybScpIHtcbiAgICAgICAgdGhpcy5lZGl0UHJvZ3JhbVNhcnREYXRlID0gZm9ybWF0ZWREYXRlO1xuICAgICAgICB0aGlzLmdldEVkaXRQcm9ncmFtQ2FsZW5kYXJTdGFydERhdGUubmV4dCh0aGlzLmVkaXRQcm9ncmFtU2FydERhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm0gPT09ICdlZGl0X2FjdGl2aXR5X2Zvcm0nKSB7XG4gICAgICAgIHRoaXMuZWRpdEFjdGl2aXR5U2FydERhdGUgPSBmb3JtYXRlZERhdGU7XG4gICAgICAgIHRoaXMuZ2V0RWRpdEFjdGl2aXR5Q2FsZW5kYXJTdGFydERhdGUubmV4dCh0aGlzLmVkaXRBY3Rpdml0eVNhcnREYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChmb3JtID09PSAnYXBwcm92YWxfZm9ybScpIHtcbiAgICAgICAgdGhpcy5hcHByb3ZhbFN0YXJ0RGF0ZSA9IGZvcm1hdGVkRGF0ZTtcbiAgICAgICAgdGhpcy5nZXRBcHByb3ZhbENhbGVuZGFyU3RhcnREYXRlLm5leHQodGhpcy5hcHByb3ZhbFN0YXJ0RGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZm9ybSA9PT0gJ2NyZWF0ZV9taWxlc3RvbmVfZm9ybScpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVNaWxlc3RvbmVTdGFydERhdGUgPSBmb3JtYXRlZERhdGU7XG4gICAgICAgIHRoaXMuZ2V0Q3JlYXRlTWlsZXN0b25lQ2FsZW5kYXJTdGFydERhdGUubmV4dCh0aGlzLmNyZWF0ZU1pbGVzdG9uZVN0YXJ0RGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZm9ybSA9PT0gJ3Byb2dyYW1fZGlyZWN0X2VudHJ5X2Zvcm0nKSB7XG4gICAgICAgIHRoaXMucHJvZ3JhbURpcmVjdEVudHJ5U3RhcnREYXRlID0gZm9ybWF0ZWREYXRlO1xuICAgICAgICB0aGlzLmdldFByb2dyYW1EaXJlY3RFbnRyeUNhbGVuZGFyU3RhcnREYXRlLm5leHQodGhpcy5wcm9ncmFtRGlyZWN0RW50cnlTdGFydERhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=