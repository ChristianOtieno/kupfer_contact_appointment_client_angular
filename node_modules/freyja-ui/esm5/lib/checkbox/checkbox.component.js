import * as tslib_1 from "tslib";
// Angular Imports
import { Component, Input, Output, EventEmitter } from '@angular/core';
// Internal Imports
import { BaseComponent } from '../shared/base.component';
/**
 * Count for Next Id
 */
var nextId = 0;
/**
 * Freyja CheckBox Component according to specifics of Freyja Design
 */
var CheckboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CheckboxComponent, _super);
    function CheckboxComponent() {
        var _this = _super.call(this) || this;
        // This is to make component controlled
        _this.checkedVal = false;
        _this.indeterminateVal = false;
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        _this.id = "fj-checkbox-" + ++nextId;
        /**
         * on change event, will be emitted once user clicks on checkbox to change value
         */
        _this.change = new EventEmitter(false);
        return _this;
    }
    Object.defineProperty(CheckboxComponent.prototype, "indeterminate", {
        /**
         * will determine indeterminate state of checkbox
         */
        get: function () {
            return this.indeterminateVal;
        },
        set: function (val) {
            this.indeterminateVal = this.coerceBooleanInput(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "checked", {
        /**
         * Will determin initial checked state of checkbox
         */
        get: function () {
            return this.checkedVal;
        },
        set: function (v) {
            if (v !== this.checkedVal) {
                this.checkedVal = this.coerceBooleanInput(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * capture on click and toggle state of checkbox
     * @param event emitted by html element on click
     */
    CheckboxComponent.prototype.onCheckboxClicked = function (event) {
        event.stopPropagation();
        this.toggle();
    };
    /**
     * stop event propagation by capturing it
     * @param event html event
     */
    CheckboxComponent.prototype.onChangeEvent = function (event) {
        event.stopPropagation();
    };
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    CheckboxComponent.prototype.generateClassList = function () {
        var _a;
        var base = 'fj-checkbox--';
        var classes = (_a = {},
            _a[base + "label-before"] = this.labelPosition === 'before',
            _a[base + "disabled"] = this.disabled,
            _a[base + "indeterminate"] = this.indeterminate,
            _a);
        return classes;
    };
    /**
     * Toggle state of checked value and emit on change
     */
    CheckboxComponent.prototype.toggle = function () {
        this.checked = !this.checked;
        this.change.emit(this.checkedVal);
    };
    CheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-checkbox',
                    template: "<label [attr.for]=\"id\"\n       class=\"fj-checkbox\"\n       [ngClass]=\"generateClassList()\">\n  <input class=\"fj-checkbox__input\"\n         type=\"checkbox\"\n         [id]=\"id\"\n         [required]=\"required\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         [attr.name]=\"name\"\n         [tabIndex]=\"tabIndex\"\n         [indeterminate]=\"indeterminate\"\n         [attr.aria-label]=\"ariaLabel || null\"\n         [attr.aria-labelledby]=\"ariaLabelledby\"\n         (change)=\"onChangeEvent($event)\"\n         (click)=\"onCheckboxClicked($event)\">\n  <span class=\"fj-checkbox-label\">\n    <ng-content></ng-content>\n  </span>\n</label>",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-checkbox{display:inline-flex;cursor:pointer;white-space:nowrap;align-items:center;margin-right:.5625rem}.fj-checkbox__input{display:inline-block;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;height:1.125rem;outline:0;position:relative;width:1.125rem;margin-right:.5625rem}.fj-checkbox__input::before{display:block;position:absolute;top:0;left:0;background-color:transparent;border:.0625rem solid #1b51a0;border-radius:.125rem;content:'';height:1rem;transition:.1s linear;width:1rem}.fj-checkbox__input::after{border-bottom:.125rem solid #fff;border-radius:.0625rem;border-right:.125rem solid #fff;content:'';display:block;height:.5625rem;left:.375rem;opacity:0;position:absolute;top:.125rem;-webkit-transform:rotate(45deg);transform:rotate(45deg);width:.25rem}.fj-checkbox__input:active::before,.fj-checkbox__input:focus::before,.fj-checkbox__input:hover::before{background-color:#dce8f9}.fj-checkbox__input:checked::before{background-color:#1b51a0}.fj-checkbox__input:checked::after{opacity:1}.fj-checkbox__input:checked:active::before,.fj-checkbox__input:checked:focus::before,.fj-checkbox__input:checked:hover::before{background-color:#7596c5}.fj-checkbox__input:disabled{opacity:.4;cursor:default}.fj-checkbox__input:disabled::after{background-color:transparent;border-color:#000}.fj-checkbox__input:disabled:checked::before{background-color:rgba(0,0,0,.15)}.fj-checkbox__input:indeterminate::after{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.fj-checkbox--label-before .fj-checkbox-input{order:1;margin-left:.5625rem}.fj-checkbox--disabled{opacity:.5;cursor:auto}"]
                }] }
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return []; };
    CheckboxComponent.propDecorators = {
        id: [{ type: Input }],
        indeterminate: [{ type: Input }],
        change: [{ type: Output }],
        checked: [{ type: Input }]
    };
    return CheckboxComponent;
}(BaseComponent));
export { CheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZnJleWphLXVpLyIsInNvdXJjZXMiOlsibGliL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0JBQWtCO0FBQ2xCLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsbUJBQW1CO0FBQ25CLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV6RDs7R0FFRztBQUNILElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmOztHQUVHO0FBQ0g7SUFLdUMsNkNBQWE7SUF1Q2xEO1FBQUEsWUFDRSxpQkFBTyxTQUNSO1FBdkNELHVDQUF1QztRQUMvQixnQkFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixzQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFFakM7O1dBRUc7UUFDTSxRQUFFLEdBQUcsaUJBQWUsRUFBRSxNQUFRLENBQUM7UUFZeEM7O1dBRUc7UUFDTyxZQUFNLEdBQTBCLElBQUksWUFBWSxDQUFVLEtBQUssQ0FBQyxDQUFDOztJQWlCM0UsQ0FBQztJQTVCRCxzQkFDSSw0Q0FBYTtRQUpqQjs7V0FFRzthQUNIO1lBRUUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDL0IsQ0FBQzthQUNELFVBQWtCLEdBQVk7WUFDNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RCxDQUFDOzs7T0FIQTtJQWFELHNCQUNJLHNDQUFPO1FBSlg7O1dBRUc7YUFDSDtZQUVFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO2FBQ0QsVUFBWSxDQUFVO1lBQ3BCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzlDO1FBQ0gsQ0FBQzs7O09BTEE7SUFVRDs7O09BR0c7SUFDSCw2Q0FBaUIsR0FBakIsVUFBa0IsS0FBWTtRQUM1QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCx5Q0FBYSxHQUFiLFVBQWMsS0FBWTtRQUN4QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNkNBQWlCLEdBQXhCOztRQUNFLElBQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQztRQUM3QixJQUFNLE9BQU87WUFDWCxHQUFJLElBQUksaUJBQWMsSUFBRyxJQUFJLENBQUMsYUFBYSxLQUFLLFFBQVE7WUFDeEQsR0FBSSxJQUFJLGFBQVUsSUFBRyxJQUFJLENBQUMsUUFBUTtZQUNsQyxHQUFJLElBQUksa0JBQWUsSUFBRyxJQUFJLENBQUMsYUFBYTtlQUM3QyxDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksa0NBQU0sR0FBYjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxDQUFDOztnQkFuRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixxckJBQXdDOztpQkFFekM7Ozs7O3FCQVVFLEtBQUs7Z0NBSUwsS0FBSzt5QkFXTCxNQUFNOzBCQUtOLEtBQUs7O0lBa0RSLHdCQUFDO0NBQUEsQUFwRkQsQ0FLdUMsYUFBYSxHQStFbkQ7U0EvRVksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhciBJbXBvcnRzXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBJbnRlcm5hbCBJbXBvcnRzXG5pbXBvcnQgeyBCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vc2hhcmVkL2Jhc2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBDb3VudCBmb3IgTmV4dCBJZFxuICovXG5sZXQgbmV4dElkID0gMDtcblxuLyoqXG4gKiBGcmV5amEgQ2hlY2tCb3ggQ29tcG9uZW50IGFjY29yZGluZyB0byBzcGVjaWZpY3Mgb2YgRnJleWphIERlc2lnblxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmai1jaGVja2JveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jaGVja2JveC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2NoZWNrYm94LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuICAvLyBUaGlzIGlzIHRvIG1ha2UgY29tcG9uZW50IGNvbnRyb2xsZWRcbiAgcHJpdmF0ZSBjaGVja2VkVmFsID0gZmFsc2U7XG4gIHByaXZhdGUgaW5kZXRlcm1pbmF0ZVZhbCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBQcm92aWRlIHVuaXF1ZSBJRCBvciBpdCB3aWxsIHVzZSBhdXRvIGdlbmVyYXRlZCBmcm9tIGNvdW50ZXJcbiAgICovXG4gIEBJbnB1dCgpIGlkID0gYGZqLWNoZWNrYm94LSR7KytuZXh0SWR9YDtcbiAgLyoqXG4gICAqIHdpbGwgZGV0ZXJtaW5lIGluZGV0ZXJtaW5hdGUgc3RhdGUgb2YgY2hlY2tib3hcbiAgICovXG4gIEBJbnB1dCgpXG4gIGdldCBpbmRldGVybWluYXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmluZGV0ZXJtaW5hdGVWYWw7XG4gIH1cbiAgc2V0IGluZGV0ZXJtaW5hdGUodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5pbmRldGVybWluYXRlVmFsID0gdGhpcy5jb2VyY2VCb29sZWFuSW5wdXQodmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbiBjaGFuZ2UgZXZlbnQsIHdpbGwgYmUgZW1pdHRlZCBvbmNlIHVzZXIgY2xpY2tzIG9uIGNoZWNrYm94IHRvIGNoYW5nZSB2YWx1ZVxuICAgKi9cbiAgQE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPihmYWxzZSk7XG5cbiAgLyoqXG4gICAqIFdpbGwgZGV0ZXJtaW4gaW5pdGlhbCBjaGVja2VkIHN0YXRlIG9mIGNoZWNrYm94XG4gICAqL1xuICBASW5wdXQoKVxuICBnZXQgY2hlY2tlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jaGVja2VkVmFsO1xuICB9XG4gIHNldCBjaGVja2VkKHY6IGJvb2xlYW4pIHtcbiAgICBpZiAodiAhPT0gdGhpcy5jaGVja2VkVmFsKSB7XG4gICAgICB0aGlzLmNoZWNrZWRWYWwgPSB0aGlzLmNvZXJjZUJvb2xlYW5JbnB1dCh2KTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG4gIC8qKlxuICAgKiBjYXB0dXJlIG9uIGNsaWNrIGFuZCB0b2dnbGUgc3RhdGUgb2YgY2hlY2tib3hcbiAgICogQHBhcmFtIGV2ZW50IGVtaXR0ZWQgYnkgaHRtbCBlbGVtZW50IG9uIGNsaWNrXG4gICAqL1xuICBvbkNoZWNrYm94Q2xpY2tlZChldmVudDogRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnRvZ2dsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0b3AgZXZlbnQgcHJvcGFnYXRpb24gYnkgY2FwdHVyaW5nIGl0XG4gICAqIEBwYXJhbSBldmVudCBodG1sIGV2ZW50XG4gICAqL1xuICBvbkNoYW5nZUV2ZW50KGV2ZW50OiBFdmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGNsYXNzZXMgdXNpbmcgQkVNIGFwcHJhb2NoIGFuZCBiaW5kIHRvIG5nQ2xhc3NcbiAgICovXG4gIHB1YmxpYyBnZW5lcmF0ZUNsYXNzTGlzdCgpIHtcbiAgICBjb25zdCBiYXNlID0gJ2ZqLWNoZWNrYm94LS0nO1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICBbYCR7YmFzZX1sYWJlbC1iZWZvcmVgXTogdGhpcy5sYWJlbFBvc2l0aW9uID09PSAnYmVmb3JlJyxcbiAgICAgIFtgJHtiYXNlfWRpc2FibGVkYF06IHRoaXMuZGlzYWJsZWQsXG4gICAgICBbYCR7YmFzZX1pbmRldGVybWluYXRlYF06IHRoaXMuaW5kZXRlcm1pbmF0ZVxuICAgIH07XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHN0YXRlIG9mIGNoZWNrZWQgdmFsdWUgYW5kIGVtaXQgb24gY2hhbmdlXG4gICAqL1xuICBwdWJsaWMgdG9nZ2xlKCkge1xuICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdCh0aGlzLmNoZWNrZWRWYWwpO1xuICB9XG59XG4iXX0=