import { DomSanitizer } from '@angular/platform-browser';
import { finalize, map, share, tap, take } from 'rxjs/operators';
import { HttpClientModule, HttpClient, HttpHeaders } from '@angular/common/http';
import { DropzoneComponent, DropzoneDirective, DropzoneModule, DROPZONE_CONFIG } from 'ngx-dropzone-wrapper';
import { __extends, __assign } from 'tslib';
import * as moment_ from 'moment';
import { CommonModule } from '@angular/common';
import { NgxMyDatePickerConfig, NgxMyDatePickerModule } from 'ngx-mydatepicker';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Injectable, Input, Optional, SecurityContext, Component, NgModule, EventEmitter, Output, ElementRef, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';
import { of, Subject } from 'rxjs';

var FreyjaService = /** @class */ (function () {
    function FreyjaService() {
    }
    FreyjaService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FreyjaService.ctorParameters = function () { return []; };
    FreyjaService.ngInjectableDef = defineInjectable({ factory: function FreyjaService_Factory() { return new FreyjaService(); }, token: FreyjaService, providedIn: "root" });
    return FreyjaService;
}());

var FreyjaComponent = /** @class */ (function () {
    function FreyjaComponent() {
    }
    FreyjaComponent.prototype.ngOnInit = function () {
    };
    FreyjaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-freyja',
                    template: "\n    <p>\n      freyja works!\n    </p>\n  "
                }] }
    ];
    /** @nocollapse */
    FreyjaComponent.ctorParameters = function () { return []; };
    return FreyjaComponent;
}());

var FreyjaModule = /** @class */ (function () {
    function FreyjaModule() {
    }
    FreyjaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FreyjaComponent],
                    imports: [
                        HttpClientModule
                    ],
                    exports: [FreyjaComponent]
                },] }
    ];
    return FreyjaModule;
}());

// Angular Imports
/**
 * @description Common set of inputs and methods to be used in all Freyja Components
 */
var BaseComponent = /** @class */ (function () {
    function BaseComponent() {
        this._disabled = false;
        /**
         * If component will take full width of it's container
         */
        this.fullWidth = false;
        /**
         * label position, if it will appear before or after content
         */
        this.labelPosition = 'after';
        /**
       * Size can be micro, small, medium or large
       */
        this.size = 'medium';
        /**
         * Placeholder for HTML input elements
         */
        this.placeholder = '';
        /**
         * if component value is required in a form
         */
        this.required = false;
    }
    Object.defineProperty(BaseComponent.prototype, "disabled", {
        /**
         * If component will be disabled, setter/getter to support approach like below
         * <fj-comp disabled></fj-comp>
         */
        get: function () {
            return this._disabled;
        },
        set: function (v) {
            this._disabled = this.coerceBooleanInput(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @description coerce an inout value into boolean
     * @param val an input value which will be coearced into a boolean value
     */
    BaseComponent.prototype.coerceBooleanInput = function (val) {
        return !!val || val === '';
    };
    BaseComponent.propDecorators = {
        customStyles: [{ type: Input }],
        name: [{ type: Input }],
        margin: [{ type: Input }],
        disabled: [{ type: Input }],
        fullWidth: [{ type: Input }],
        label: [{ type: Input }],
        labelPosition: [{ type: Input }],
        size: [{ type: Input }],
        placeholder: [{ type: Input }],
        required: [{ type: Input }],
        tabIndex: [{ type: Input }],
        ariaLabel: [{ type: Input, args: ['aria-label',] }],
        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],
        ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }]
    };
    return BaseComponent;
}());

/**
 * Base Icon component it will be used in Icon Component and Button Component
 */
var IconBaseComponent = /** @class */ (function (_super) {
    __extends(IconBaseComponent, _super);
    function IconBaseComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Fill Color of icon, you can customize it as per your needs
         */
        _this.iconFill = 'white';
        /**
         * When used in conjuction with label or anyother content, position of icon
         */
        _this.iconPosition = 'before';
        return _this;
    }
    IconBaseComponent.propDecorators = {
        icon: [{ type: Input }],
        iconMargin: [{ type: Input }],
        iconFill: [{ type: Input }],
        iconPosition: [{ type: Input }]
    };
    return IconBaseComponent;
}(BaseComponent));

/**
 * Freyja Button Component using Freyja Design specifics
 * it extends properties of icon base component
 */
var nextId = 0;
var ButtonComponent = /** @class */ (function (_super) {
    __extends(ButtonComponent, _super);
    // TODO: add generic generateClass methods
    function ButtonComponent() {
        var _this = _super.call(this) || this;
        /** Determin if button is ghost or not, and add relevant css classes */
        _this.ghost = false;
        /**
         * Button type, it can be button, submit or reset
         */
        _this.type = 'button';
        /**
         * Will determin look and feel of button
         */
        _this.color = 'primary';
        /**
         * Shape of button, it can be rounder, square or radius
         */
        _this.shape = 'radius';
        /**
         * Provide unique to be used for button
         */
        _this.id = "fj-button-" + ++nextId;
        return _this;
    }
    /**
     * @description Perform operations which needs to be done after component is initialized
     */
    ButtonComponent.prototype.ngOnInit = function () {
        if (this.ghost) {
            this.iconFill = 'blue';
        }
    };
    /**
     * @description Add css classes based on inputs like size, shape etc
     */
    ButtonComponent.prototype.generateClassList = function () {
        var _a;
        var baseCls = 'fj-button--';
        var classes = (_a = {},
            _a[baseCls + this.color] = this.color,
            _a[baseCls + this.size] = this.size,
            _a[baseCls + this.shape] = this.shape,
            _a[baseCls + 'full-width'] = this.fullWidth,
            _a[baseCls + "icon-before"] = this.iconPosition === 'before',
            _a[baseCls + "ghost"] = this.ghost,
            _a);
        return classes;
    };
    /**
     * generate custom styles
     */
    ButtonComponent.prototype.generateStyles = function () {
        return __assign({}, this.customStyles, { margin: this.margin });
    };
    /**
     * function that it is triggered when the mouse pointer enters the button
     */
    ButtonComponent.prototype.onMouseEnter = function () {
        if (this.ghost) {
            this.iconFill = 'white';
        }
    };
    /**
     * function that it is triggered when the mouse pointer leaves the button
     */
    ButtonComponent.prototype.onMouseLeave = function () {
        if (this.ghost) {
            this.iconFill = 'blue';
        }
    };
    ButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-button',
                    template: "<button [id]=\"id\"\n        class=\"fj-button\"\n        [ngClass]=\"generateClassList()\"\n        [ngStyle]= \"generateStyles()\"\n        [disabled]=\"disabled\"\n        [tabIndex]=\"tabIndex\"\n        [type]=\"type\"\n        (mouseenter)=\"onMouseEnter()\"\n        (mouseleave)=\"onMouseLeave()\"\n>\n  <span class=\"fj-button-label\">\n    <ng-content></ng-content>\n  </span>\n  <fj-icon *ngIf=\"icon\"\n           class=\"fj-button--icon\"\n           [ngStyle]=\"{margin: iconMargin}\"\n           [svgName]=\"icon\"\n           [size]=\"size\"\n           [fillColor]=\"iconFill\">\n  </fj-icon>\n</button>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-button{display:inline-flex;color:#fff;white-space:nowrap;background-color:#1b51a0;border:.0625rem solid transparent;cursor:pointer;transition:.2s linear}.fj-button:active,.fj-button:focus,.fj-button:hover{background-color:#7596c5}.fj-button--rounded{border-radius:2rem}.fj-button--radius{border-radius:.25rem}.fj-button--light{background-color:transparent;border-color:#1b51a0;color:#1b51a0}.fj-button--light:active,.fj-button--light:focus,.fj-button--light:hover{background-color:#dce8f9}.fj-button--light.btn--danger{background-color:transparent;border-color:#db0000;color:#db0000}.fj-button--light.btn--danger:active,.fj-button--light.btn--danger:focus,.fj-button--light.btn--danger:hover{background-color:#ffe9e9}.fj-button--light:disabled{border-color:rgba(0,0,0,.15);background-color:transparent;color:rgba(0,0,0,.15)}.fj-button--ghost.fj-button{background-color:transparent;color:#1b51a0;transition:.1s linear}.fj-button--ghost.fj-button:active,.fj-button--ghost.fj-button:focus,.fj-button--ghost.fj-button:hover{background-color:#1b51a0;color:#fff}.fj-button--ghost.fj-button:disabled{background-color:transparent;color:rgba(0,0,0,.15)}.fj-button--ghost.fj-button:disabled:disabled::after,.fj-button--ghost.fj-button:disabled:disabled::before{border-color:rgba(0,0,0,.15)}.fj-button--ghost.fj-button.btn--danger{background-color:transparent;color:#db0000}.fj-button--ghost.fj-button.btn--danger:active,.fj-button--ghost.fj-button.btn--danger:focus,.fj-button--ghost.fj-button.btn--danger:hover{background-color:#db0000;color:#fff}.fj-button--ghost.fj-button.btn--danger span{background-color:#db0000}.fj-button--ghost.fj-button.btn--light{border-color:transparent}.fj-button--ghost.fj-button.btn--light::after,.fj-button--ghost.fj-button.btn--light::before{border-color:#1b51a0}.fj-button--ghost.fj-button.btn--light:active::after,.fj-button--ghost.fj-button.btn--light:active::before,.fj-button--ghost.fj-button.btn--light:focus::after,.fj-button--ghost.fj-button.btn--light:focus::before,.fj-button--ghost.fj-button.btn--light:hover::after,.fj-button--ghost.fj-button.btn--light:hover::before{border-color:#fff}.fj-button--ghost.fj-button.btn--light span{background-color:transparent}.fj-button--ghost.fj-button.btn--light.btn--danger::after,.fj-button--ghost.fj-button.btn--light.btn--danger::before{border-color:#db0000}.fj-button--ghost.fj-button.btn--light.btn--danger:active::after,.fj-button--ghost.fj-button.btn--light.btn--danger:active::before,.fj-button--ghost.fj-button.btn--light.btn--danger:focus::after,.fj-button--ghost.fj-button.btn--light.btn--danger:focus::before,.fj-button--ghost.fj-button.btn--light.btn--danger:hover::after,.fj-button--ghost.fj-button.btn--light.btn--danger:hover::before{border-color:#fff}.fj-button--full-width{width:100%;display:flex;justify-content:center}.fj-button--large{font-size:1rem;height:3rem;line-height:1.25rem;padding:.875rem 1.25rem}.fj-button--medium{font-size:.875rem;height:2.5rem;line-height:1.125rem;padding:.6875rem 1rem}.fj-button--small{font-size:.75rem;height:2rem;line-height:1rem;padding:.5rem .75rem}.fj-button--micro{font-size:.625rem;height:1.5rem;line-height:.75rem;padding:.375rem .5rem}.fj-button--danger{background-color:#db0000}.fj-button--danger:active,.fj-button--danger:focus,.fj-button--danger:hover{background-color:#e96565}.fj-button:disabled{background-color:rgba(0,0,0,.15);pointer-events:none}.fj-button fj-icon{margin-left:1rem}.fj-button--icon-before>span{order:1}.fj-button--icon-before fj-icon{margin-right:1rem;margin-left:0}"]
                }] }
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return []; };
    ButtonComponent.propDecorators = {
        ghost: [{ type: Input }],
        type: [{ type: Input }],
        color: [{ type: Input }],
        shape: [{ type: Input }],
        id: [{ type: Input }]
    };
    return ButtonComponent;
}(IconBaseComponent));

var IconComponent = /** @class */ (function (_super) {
    __extends(IconComponent, _super);
    function IconComponent() {
        var _this = _super.call(this) || this;
        _this.iconClass = '';
        _this.fillColor = 'white';
        _this.display = 'inline-flex';
        _this.opacity = 1;
        return _this;
    }
    IconComponent.prototype.ngOnInit = function () {
        this.margin = '0';
        this.style = {
            'width': this.width,
            'height': 'auto',
            'opacity': this.opacity,
            'display': this.display,
            'margin': this.margin,
        };
    };
    IconComponent.prototype.ngOnChanges = function () {
        this.generateClass();
    };
    /**
     * @description Generates the class for the icon
     */
    IconComponent.prototype.generateClass = function () {
        this.class = this.iconClass + " "
            + ((this.size ? 'icon--size--' + this.size : '') + " ")
            + ((this.fillColor ? 'icon--fill--' + this.fillColor : '') + " ")
            + ("" + (this.strokeColor ? 'icon--stroke--' + this.strokeColor : ''));
    };
    IconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-icon',
                    template: "<div [ngSwitch]=\"svgName\">\n  <svg *ngSwitchCase=\"'warning'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22\"\n    height=\"19\" viewBox=\"0 0 22 19\">\n    <path fill-rule=\"evenodd\" d=\"M0 19h22L11 0 0 19zm12-3h-2v-2h2v2zm0-4h-2V8h2v4z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'app-logo'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\n    height=\"24\" viewBox=\"0 0 24 24\">\n    <path fill-rule=\"evenodd\" d=\"M13.749 16.8l-3.36-3.442L14.4 8.8h-3.066L7.2 13.358l5.601 5.85.003-.008H16.8v-2.4h-3.051zM0 21.199V2.806 2.8A2.8 2.8 0 0 1 2.805 0h18.422A2.8 2.8 0 0 1 24 2.806V21.2a2.8 2.8 0 0 1-2.811 2.8H2.8A2.8 2.8 0 0 1 0 21.199zM4.8 4.8v2.4h2.4V4.8H4.8zm9.6 0v2.4h2.4V4.8h-2.4zm-4.8 0v2.4H12V4.8H9.6zm-2.4 0v2.4h2.4V4.8H7.2zm9.6 0v2.4h2.4V4.8h-2.4zm-4.8 0v2.4h2.4V4.8H12zM4.8 9.6V12h2.4V9.6H4.8zm12 0V12h2.4V9.6h-2.4zm-12 4.8v2.4h2.4v-2.4H4.8zm12 0v2.4h2.4v-2.4h-2.4zm-12-7.2v2.4h2.4V7.2H4.8zm12 0v2.4h2.4V7.2h-2.4zM4.8 12v2.4h2.4V12H4.8zm12 0v2.4h2.4V12h-2.4zm-12 4.8v2.4h2.4v-2.4H4.8zm12 0v2.4h2.4v-2.4h-2.4z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'avatar-logo'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\n    height=\"24\" viewBox=\"0 0 24 24\">\n    <path fill-rule=\"evenodd\" d=\"M12 0C5.376 0 0 5.376 0 12s5.376 12 12 12 12-5.376 12-12S18.624 0 12 0zm0 3.6c1.992 0 3.6 1.608 3.6 3.6s-1.608 3.6-3.6 3.6a3.595 3.595 0 0 1-3.6-3.6c0-1.992 1.608-3.6 3.6-3.6zm0 17.04a8.64 8.64 0 0 1-7.2-3.864c.036-2.388 4.8-3.696 7.2-3.696 2.388 0 7.164 1.308 7.2 3.696A8.64 8.64 0 0 1 12 20.64z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'dropdown-open'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9\"\n    height=\"6\" viewBox=\"0 0 9 6\">\n    <path fill=\"none\" fill-rule=\"evenodd\" d=\"M9 5L4.904 1 1 5\" />\n  </svg>\n  <svg *ngSwitchCase=\"'dropdown-closed'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9\"\n    height=\"6\" viewBox=\"0 0 9 6\">\n    <path fill=\"none\" fill-rule=\"evenodd\" d=\"M0 1l4.096 4L8 1\" />\n  </svg>\n  <svg *ngSwitchCase=\"'plus'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\"\n    viewBox=\"0 0 12 12\">\n    <path fill-rule=\"evenodd\" transform=\"translate(-16 -11)\" d=\"M23.09 17.818h4.5a.42.42 0 0 0 .41-.409v-.818a.42.42 0 0 0-.41-.41h-4.5c-.163 0-.272-.108-.272-.272v-4.5A.42.42 0 0 0 22.41 11h-.818a.42.42 0 0 0-.41.41v4.5c0 .163-.108.272-.272.272h-4.5a.42.42 0 0 0-.409.409v.818c0 .218.19.41.41.41h4.5c.163 0 .272.108.272.272v4.5c0 .218.19.409.409.409h.818a.42.42 0 0 0 .41-.41v-4.5c0-.163.108-.272.272-.272z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'add_circle'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\n    height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'plus_circle'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" x=\"0px\" y=\"0px\"\n    height=\"24\" viewBox=\"0 0 50 50\">\n    <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n    <circle [ngStyle]=\"style\" cx=\"25\" cy=\"25\" r=\"25\"/>\n    <line style=\"fill:none;stroke:#FFFFFF;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;\" x1=\"25\" y1=\"13\" x2=\"25\" y2=\"38\"/>\n    <line style=\"fill:none;stroke:#FFFFFF;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;\" x1=\"37.5\" y1=\"25\" x2=\"12.5\" y2=\"25\"/>\n  </svg>\n  <svg *ngSwitchCase=\"'close'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\"\n    viewBox=\"0 0 12 12\">\n    <path fill-rule=\"evenodd\" d=\"M12 1.209L10.791 0 6 4.791 1.209 0 0 1.209 4.791 6 0 10.791 1.209 12 6 7.209 10.791 12 12 10.791 7.209 6z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'users'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"12\"\n    viewBox=\"0 0 18 12\">\n    <path fill-rule=\"evenodd\" d=\"M12.273 5.143c1.358 0 2.446-1.149 2.446-2.572C14.72 1.15 13.631 0 12.273 0S9.818 1.149 9.818 2.571c0 1.423 1.097 2.572 2.455 2.572zm-6.546 0c1.358 0 2.447-1.149 2.447-2.572C8.174 1.15 7.085 0 5.727 0S3.273 1.149 3.273 2.571c0 1.423 1.096 2.572 2.454 2.572zm0 1.714C3.821 6.857 0 7.86 0 9.857V12h11.455V9.857c0-1.997-3.821-3-5.728-3zm6.546 0c-.238 0-.508.017-.794.043.95.72 1.612 1.689 1.612 2.957V12H18V9.857c0-1.997-3.82-3-5.727-3z\" />\n  </svg>\n\n  <svg *ngSwitchCase=\"'material'\" [ngClass]=\"class\" [ngStyle]=\"{'width': width, 'height': 'auto', 'opacity': opacity, 'display': display, margin: margin}\"\n    xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n    <path fill=\"#BFBFBF\" fill-rule=\"evenodd\" d=\"M.655.035C.34.035 0 .275 0 .798v14.094c0 .556.451 1.006 1.007 1.006H15.1c.49 0 .664-.29.716-.415.052-.126.135-.453-.213-.8L1.215.294C1 .081.792.035.655.035zm.352 14.857v-1.007h1.006a.503.503 0 1 0 0-1.007H1.007v-1.007h.503a.503.503 0 1 0 0-1.006h-.503V9.858h1.006a.503.503 0 1 0 0-1.007H1.007V7.845h.503a.503.503 0 1 0 0-1.007h-.503V5.831h1.006a.503.503 0 1 0 0-1.006H1.007V1.553l13.38 13.339H1.008zm3.02-1.007h6.04c.49 0 .664-.29.716-.415.051-.126.134-.453-.213-.8L4.235 6.334c-.215-.214-.423-.26-.56-.26-.316 0-.655.24-.655.763v6.04c0 .556.452 1.007 1.007 1.007zm0-6.335l5.327 5.328H4.027V7.55zm9.93 3.926l1.036.257c.08.02.16.033.236.033a.767.767 0 0 0 .61-.287.821.821 0 0 0 .13-.72l-.258-1.037a2.645 2.645 0 0 0-.61-1.08L6.75.294a1.004 1.004 0 0 0-1.423 0l-.798.798a1.009 1.009 0 0 0 0 1.425l8.348 8.348c.26.259.723.52 1.079.611zm.777-1.512l.178.712-.712-.176a1.651 1.651 0 0 1-.61-.347L6.752 3.315l.798-.798 6.838 6.838c.133.133.3.428.346.609zM6.04 1.007l.798.797-.798.798-.798-.798.798-.797z\" />\n  </svg>\n\n  <svg *ngSwitchCase=\"'user'\" [ngClass]=\"class\" [ngStyle]=\"{'width': width, 'height': 'auto', 'opacity': opacity, 'display': display, margin: margin}\"\n    xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"14\" viewBox=\"0 0 16 14\">\n    <path fill=\"#BFBFBF\" fill-rule=\"evenodd\" d=\"M1.025 10.342l-1 3a.5.5 0 0 0 .475.659h15.001a.5.5 0 0 0 .473-.658l-1-3a.5.5 0 0 0-.335-.323l-3.5-1a.504.504 0 0 0-.363.033L8 10.442 5.223 9.053a.498.498 0 0 0-.36-.033l-3.5 1a.5.5 0 0 0-.338.322zm3.925-.307l2.826 1.413a.5.5 0 0 0 .447 0l2.825-1.413 3.06.874.698 2.092H1.193l.697-2.092 3.06-.874zM8 9.5c2.068 0 3.75-2.131 3.75-4.75C11.75 2.13 10.069 0 8 0 5.934 0 4.25 2.131 4.25 4.75 4.25 7.37 5.933 9.5 8 9.5zM8 1c1.49 0 2.75 1.716 2.75 3.75C10.75 6.782 9.49 8.5 8 8.5c-1.492 0-2.75-1.718-2.75-3.75C5.25 2.716 6.508 1 8 1z\" />\n  </svg>\n\n  <svg *ngSwitchCase=\"'assignement'\" [ngClass]=\"class\" [ngStyle]=\"{'width': width, 'height': 'auto', 'opacity': opacity, 'display': display, margin: margin}\"\n    xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\">\n    <path fill=\"#BFBFBF\" fill-rule=\"evenodd\" d=\"M3.553.277L2.94 1.5H.5A.5.5 0 0 0 0 2v13.5a.5.5 0 0 0 .5.5h11a.5.5 0 0 0 .5-.5V2a.5.5 0 0 0-.5-.5H9.06L8.446.277A.5.5 0 0 0 8 0H4a.5.5 0 0 0-.447.277zM8 8H6.5V6.5a.5.5 0 0 0-1 0V8H4a.5.5 0 0 0 0 1h1.5v1.5a.5.5 0 1 0 1 0V9H8a.5.5 0 1 0 0-1zm-7 7h10V2.5H9.56l.358.719A.5.5 0 0 1 9.505 4H2.5a.5.5 0 0 1-.447-.724L2.44 2.5H1V15zM7.69 1l1 2H3.31l1-2h3.38z\" />\n  </svg>\n\n  <svg *ngSwitchCase=\"'activities'\" [ngClass]=\"class\" [ngStyle]=\"{'width': width, 'height': 'auto', 'opacity': opacity, 'display': display, margin: margin}\"\n    xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"10\" viewBox=\"0 0 16 10\">\n    <path fill-rule=\"evenodd\" d=\"M.5 5.833h1.667V4.167H.5v1.666zm0 3.334h1.667V7.5H.5v1.667zM.5 2.5h1.667V.833H.5V2.5zm3.333 3.333H15.5V4.167H3.833v1.666zm0 3.334H15.5V7.5H3.833v1.667zm0-8.334V2.5H15.5V.833H3.833z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'calendar'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\"\n    height=\"18\" viewBox=\"0 0 16 18\">\n    <path fill-rule=\"evenodd\" d=\"M12.167 8.333H3.833V10h8.334V8.333zM13.833 2.5H13V.833h-1.667V2.5H4.667V.833H3V2.5h-.833A1.66 1.66 0 0 0 .508 4.167L.5 15.833c0 .917.742 1.667 1.667 1.667h11.666c.917 0 1.667-.75 1.667-1.667V4.167c0-.917-.75-1.667-1.667-1.667zm0 13.333H2.167V6.667h11.666v9.166zm-4.166-4.166H3.833v1.666h5.834v-1.666z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'files'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"\n    viewBox=\"0 0 16 20\">\n    <path fill-rule=\"evenodd\" d=\"M6,2 C4.9,2 4.01,2.9 4.01,4 L4,20 C4,21.1 4.89,22 5.99,22 L18,22 C19.1,22 20,21.1 20,20 L20,8 L14,2 L6,2 L6,2 Z M13,9 L13,3.5 L18.5,9 L13,9 L13,9 Z\"\n      transform=\"translate(-4 -2)\" />\n  </svg>\n  <svg *ngSwitchCase=\"'attachment'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\"\n    height=\"14\" viewBox=\"0 0 14 14\">\n    <path fill-rule=\"nonzero\" d=\"M12.808 3.16a3.908 3.908 0 0 0-2.758-1.132h-.01c-.502 0-.992.094-1.457.278a3.853 3.853 0 0 0-1.29.842L3.656 6.745c-.42.416-.65.97-.649 1.563a2.19 2.19 0 0 0 .657 1.562c.421.418.98.647 1.578.649h.004c.596 0 1.153-.228 1.572-.64l3.194-3.157a.545.545 0 0 0 0-.781.56.56 0 0 0-.788 0L6.03 9.097a1.107 1.107 0 0 1-.786.319h-.002a1.128 1.128 0 0 1-.794-.325 1.098 1.098 0 0 1-.328-.785 1.075 1.075 0 0 1 .322-.778l3.64-3.598a2.764 2.764 0 0 1 1.959-.797h.007c.747.001 1.449.289 1.975.808.525.52.816 1.212.818 1.95a2.702 2.702 0 0 1-.805 1.942l-3.861 3.82a4.111 4.111 0 0 1-2.903 1.178H5.26a4.145 4.145 0 0 1-2.92-1.197 4.037 4.037 0 0 1-1.21-2.886 3.997 3.997 0 0 1 1.194-2.876L7.309.944a.545.545 0 0 0 0-.781A.56.56 0 0 0 6.52.16L1.536 5.09a5.096 5.096 0 0 0-1.52 3.66c.001.674.13 1.33.387 1.95a5.224 5.224 0 0 0 2.883 2.852c.625.252 1.289.38 1.972.383h.014a5.25 5.25 0 0 0 3.687-1.503l3.861-3.819a3.825 3.825 0 0 0 1.133-2.728c-.005-1.031-.41-2-1.145-2.727z\"\n      opacity=\".45\" />\n  </svg>\n  <svg *ngSwitchCase=\"'delete'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9\" height=\"12\"\n    viewBox=\"0 0 9 12\">\n    <path fill-rule=\"evenodd\" d=\"M.643 10.667C.643 11.4 1.22 12 1.929 12H7.07c.708 0 1.286-.6 1.286-1.333v-8H.643v8zM9 .667H6.75L6.107 0H2.893L2.25.667H0V2h9V.667z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'download'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12\"\n    height=\"14\" viewBox=\"0 0 14 17\">\n    <path fill-rule=\"evenodd\" d=\"M19,9 L15,9 L15,3 L9,3 L9,9 L5,9 L12,16 L19,9 L19,9 Z M5,18 L5,20 L19,20 L19,18 L5,18 L5,18 Z\"\n      transform=\"translate(-5 -3)\" />\n  </svg>\n  <svg *ngSwitchCase=\"'search'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17\"\n    height=\"17\" viewBox=\"0 0 17 17\">\n    <path fill-rule=\"evenodd\" d=\"M12.063 9.718a.532.532 0 0 0-.752 0l-.42.421L9.88 9.127a5.557 5.557 0 0 0 1.278-3.549A5.585 5.585 0 0 0 5.58 0 5.585 5.585 0 0 0 0 5.578a5.584 5.584 0 0 0 5.579 5.578c1.346 0 2.582-.48 3.549-1.278l1.012 1.013-.423.42a.532.532 0 0 0 0 .752l4.782 4.782a.534.534 0 0 0 .752 0l1.594-1.594a.532.532 0 0 0 0-.752l-4.782-4.78zm-11-4.14a4.52 4.52 0 0 1 4.516-4.516 4.522 4.522 0 0 1 4.516 4.516 4.522 4.522 0 0 1-4.516 4.516 4.52 4.52 0 0 1-4.516-4.516zm13.813 10.14l-4.03-4.03.842-.843 4.03 4.03-.842.843z\" />\n  </svg>\n  <svg *ngSwitchCase=\"'passwUpdated'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"36\"\n    height=\"49\" viewBox=\"0 0 36 49\">\n    <g fill=\"none\" fill-rule=\"evenodd\">\n      <path stroke=\"#F5A623\" d=\"M9 10.683V10.6c0-5.256 4.03-9.517 9-9.517s9 4.261 9 9.517v10.081H9v-9.998z\" />\n      <g transform=\"translate(0 20.2)\">\n        <rect width=\"35\" height=\"27.295\" x=\".5\" y=\".5\" stroke=\"#FF962A\" rx=\"2.5\" />\n        <g stroke=\"#FF9600\" transform=\"translate(11.854 7.635)\">\n          <ellipse cx=\"6.366\" cy=\"6.512\" rx=\"6.366\" ry=\"6.512\" />\n          <path d=\"M3.073 6.424l2.67 2.558 4.25-4.6\" />\n        </g>\n      </g>\n    </g>\n  </svg>\n  <svg *ngSwitchCase=\"'mail-box'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"78\"\n    height=\"42\" viewBox=\"0 0 78 42\">\n    <g fill=\"none\" fill-rule=\"evenodd\" transform=\"matrix(-1 0 0 1 78 1)\">\n      <rect width=\"66.398\" height=\"39\" x=\".5\" y=\".5\" stroke=\"#FF9222\" rx=\".6\" />\n      <path stroke=\"#FF9222\" d=\"M.285.297l33.482 23.711L67.25.298\" />\n      <path stroke=\"#F5A623\" d=\"M.195 39.688l28.582-19.169M67.173 39.728L38.621 20.584\" />\n      <path stroke=\"#FF9222\" d=\"M71.336 15.88h4.981M71.336 19.026h6.647M71.336 22.172h4.981\" />\n    </g>\n  </svg>\n  <svg *ngSwitchCase=\"'upload'\" [ngClass]=\"class\" [ngStyle]=\"style\" xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"/></svg>\n  <svg *ngSwitchCase=\"'github'\" [ngClass]=\"class\" [ngStyle]=\"style\" width=\"20\" height=\"20\" viewBox=\"0 0 1024 1024\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\" transform=\"scale(64)\" fill=\"#FFFFFF\"/>\n  </svg>\n  <svg *ngSwitchCase=\"'walhall'\" [ngClass]=\"class\" [ngStyle]=\"style\" width=\"64\" height=\"23\" viewBox=\"0 0 64 23\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <!-- Generator: Sketch 52.6 (67491) - http://www.bohemiancoding.com/sketch -->\n      <title>Group 7</title>\n      <desc>Created with Sketch.</desc>\n      <defs>\n          <path d=\"M16.0421143,-9.90318938e-14 L20.2323767,4.27985683 L16.0421143,8.55971367 L11.8518519,4.27985683 L16.0421143,-9.90318938e-14 Z M0,6.96052632 L7.35694758,6.96052632 C8.46499965,8.63411102 9.74798216,10.1846885 11.2058951,11.6122587 C12.6638081,13.0398289 14.3192519,14.3665219 16.1722266,15.5923378 C17.8321368,14.5139075 19.3647935,13.262592 20.7701965,11.8383914 C22.1755995,10.4141907 23.4822371,8.78823572 24.6901093,6.96052632 L32,6.96052632 C30.5890348,9.19421808 28.4259152,11.7881972 25.5106412,14.7424637 C22.5953672,17.6967302 19.4825623,20.4492423 16.1722266,23 C12.5393625,20.1864396 9.43272829,17.5000481 6.852324,14.9408255 C4.2719197,12.381603 1.9878117,9.72150324 0,6.96052632 Z\" id=\"path-1\"></path>\n          <filter x=\"-21.9%\" y=\"-21.7%\" width=\"143.8%\" height=\"160.9%\" filterUnits=\"objectBoundingBox\" id=\"filter-2\">\n              <feOffset dx=\"0\" dy=\"2\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"></feOffset>\n              <feGaussianBlur stdDeviation=\"2\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"></feGaussianBlur>\n              <feColorMatrix values=\"0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0\" type=\"matrix\" in=\"shadowBlurOuter1\"></feColorMatrix>\n          </filter>\n      </defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g id=\"Artboard\">\n              <g id=\"Group-7\">\n                  <g id=\"Combined-Shape\">\n                      <use fill=\"black\" fill-opacity=\"1\" filter=\"url(#filter-2)\" xlink:href=\"#path-1\"></use>\n                      <use fill=\"#FFFFFF\" fill-rule=\"evenodd\" xlink:href=\"#path-1\"></use>\n                  </g>\n                  <g id=\"Group-2\" transform=\"translate(34.000000, 0.000000)\">\n                      <path d=\"M8.5,0 L21.5,0 C26.1944204,-8.62351033e-16 30,3.80557963 30,8.5 L30,8.5 C30,13.1944204 26.1944204,17 21.5,17 L2.1,17 C0.940202025,17 -3.02054922e-16,16.059798 -4.4408921e-16,14.9 L0,8.5 C-5.74900688e-16,3.80557963 3.80557963,8.62351033e-16 8.5,0 Z\" id=\"round\" fill=\"#404040\" fill-rule=\"nonzero\"></path>\n                      <text id=\"Tag\" font-family=\"OpenSans-Semibold, Open Sans\" font-size=\"8.4\" font-weight=\"500\" line-spacing=\"11.2\" fill=\"#FFFFFF\">\n                          <tspan x=\"5.6\" y=\"11.1\">Beta</tspan>\n                      </text>\n                  </g>\n              </g>\n          </g>\n      </g>\n  </svg>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.icon--fill--black{fill:#000}.icon--fill--blue{fill:#1b51a0}.icon--fill--white{fill:#fff}.icon--fill--blue-light{fill:#7596c5}.icon--fill--gray{fill:rgba(0,0,0,.15)}.icon--fill--gray-light{fill:rgba(0,0,0,.2)}.icon--size--med{width:.5rem}"]
                }] }
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return []; };
    IconComponent.propDecorators = {
        iconClass: [{ type: Input }],
        svgName: [{ type: Input }],
        width: [{ type: Input }],
        fillColor: [{ type: Input }],
        strokeColor: [{ type: Input }],
        display: [{ type: Input }],
        opacity: [{ type: Input }]
    };
    return IconComponent;
}(BaseComponent));

var IconModule = /** @class */ (function () {
    function IconModule() {
    }
    IconModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [IconComponent],
                    exports: [IconComponent]
                },] }
    ];
    return IconModule;
}());

var FjButtonModule = /** @class */ (function () {
    function FjButtonModule() {
    }
    FjButtonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        IconModule
                    ],
                    declarations: [ButtonComponent],
                    exports: [ButtonComponent]
                },] }
    ];
    return FjButtonModule;
}());

/**
 * Count for Next Id
 */
var nextId$1 = 0;
/**
 * Freyja CheckBox Component according to specifics of Freyja Design
 */
var CheckboxComponent = /** @class */ (function (_super) {
    __extends(CheckboxComponent, _super);
    function CheckboxComponent() {
        var _this = _super.call(this) || this;
        // This is to make component controlled
        _this.checkedVal = false;
        _this.indeterminateVal = false;
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        _this.id = "fj-checkbox-" + ++nextId$1;
        /**
         * on change event, will be emitted once user clicks on checkbox to change value
         */
        _this.change = new EventEmitter(false);
        return _this;
    }
    Object.defineProperty(CheckboxComponent.prototype, "indeterminate", {
        /**
         * will determine indeterminate state of checkbox
         */
        get: function () {
            return this.indeterminateVal;
        },
        set: function (val) {
            this.indeterminateVal = this.coerceBooleanInput(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "checked", {
        /**
         * Will determin initial checked state of checkbox
         */
        get: function () {
            return this.checkedVal;
        },
        set: function (v) {
            if (v !== this.checkedVal) {
                this.checkedVal = this.coerceBooleanInput(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * capture on click and toggle state of checkbox
     * @param event emitted by html element on click
     */
    CheckboxComponent.prototype.onCheckboxClicked = function (event) {
        event.stopPropagation();
        this.toggle();
    };
    /**
     * stop event propagation by capturing it
     * @param event html event
     */
    CheckboxComponent.prototype.onChangeEvent = function (event) {
        event.stopPropagation();
    };
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    CheckboxComponent.prototype.generateClassList = function () {
        var _a;
        var base = 'fj-checkbox--';
        var classes = (_a = {},
            _a[base + "label-before"] = this.labelPosition === 'before',
            _a[base + "disabled"] = this.disabled,
            _a[base + "indeterminate"] = this.indeterminate,
            _a);
        return classes;
    };
    /**
     * Toggle state of checked value and emit on change
     */
    CheckboxComponent.prototype.toggle = function () {
        this.checked = !this.checked;
        this.change.emit(this.checkedVal);
    };
    CheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-checkbox',
                    template: "<label [attr.for]=\"id\"\n       class=\"fj-checkbox\"\n       [ngClass]=\"generateClassList()\">\n  <input class=\"fj-checkbox__input\"\n         type=\"checkbox\"\n         [id]=\"id\"\n         [required]=\"required\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         [attr.name]=\"name\"\n         [tabIndex]=\"tabIndex\"\n         [indeterminate]=\"indeterminate\"\n         [attr.aria-label]=\"ariaLabel || null\"\n         [attr.aria-labelledby]=\"ariaLabelledby\"\n         (change)=\"onChangeEvent($event)\"\n         (click)=\"onCheckboxClicked($event)\">\n  <span class=\"fj-checkbox-label\">\n    <ng-content></ng-content>\n  </span>\n</label>",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-checkbox{display:inline-flex;cursor:pointer;white-space:nowrap;align-items:center;margin-right:.5625rem}.fj-checkbox__input{display:inline-block;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;height:1.125rem;outline:0;position:relative;width:1.125rem;margin-right:.5625rem}.fj-checkbox__input::before{display:block;position:absolute;top:0;left:0;background-color:transparent;border:.0625rem solid #1b51a0;border-radius:.125rem;content:'';height:1rem;transition:.1s linear;width:1rem}.fj-checkbox__input::after{border-bottom:.125rem solid #fff;border-radius:.0625rem;border-right:.125rem solid #fff;content:'';display:block;height:.5625rem;left:.375rem;opacity:0;position:absolute;top:.125rem;-webkit-transform:rotate(45deg);transform:rotate(45deg);width:.25rem}.fj-checkbox__input:active::before,.fj-checkbox__input:focus::before,.fj-checkbox__input:hover::before{background-color:#dce8f9}.fj-checkbox__input:checked::before{background-color:#1b51a0}.fj-checkbox__input:checked::after{opacity:1}.fj-checkbox__input:checked:active::before,.fj-checkbox__input:checked:focus::before,.fj-checkbox__input:checked:hover::before{background-color:#7596c5}.fj-checkbox__input:disabled{opacity:.4;cursor:default}.fj-checkbox__input:disabled::after{background-color:transparent;border-color:#000}.fj-checkbox__input:disabled:checked::before{background-color:rgba(0,0,0,.15)}.fj-checkbox__input:indeterminate::after{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.fj-checkbox--label-before .fj-checkbox-input{order:1;margin-left:.5625rem}.fj-checkbox--disabled{opacity:.5;cursor:auto}"]
                }] }
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return []; };
    CheckboxComponent.propDecorators = {
        id: [{ type: Input }],
        indeterminate: [{ type: Input }],
        change: [{ type: Output }],
        checked: [{ type: Input }]
    };
    return CheckboxComponent;
}(BaseComponent));

var FjCheckboxModule = /** @class */ (function () {
    function FjCheckboxModule() {
    }
    FjCheckboxModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [CheckboxComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        CheckboxComponent
                    ]
                },] }
    ];
    return FjCheckboxModule;
}());

/**
 * Count for Next Id
 */
var nextId$2 = 0;
/**
 * Freyja Radio Button Component according to specifics of Freyja of Freyja Design
 */
var RadioButtonComponent = /** @class */ (function (_super) {
    __extends(RadioButtonComponent, _super);
    function RadioButtonComponent() {
        var _this = _super.call(this) || this;
        // This is to make component controlled
        _this.checkedValue = false;
        _this.uniqueInputId = "fj-radio-button-" + ++nextId$2;
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        _this.id = "fj-radio-button-" + ++nextId$2;
        /**
         * on change event, will be emitted once user clicks on radio button to change value
         */
        _this.change = new EventEmitter();
        return _this;
    }
    Object.defineProperty(RadioButtonComponent.prototype, "checked", {
        /**
         * Will determin initial checked state of radio button
         */
        get: function () {
            return this.checkedValue;
        },
        set: function (v) {
            if (v !== this.checkedValue) {
                this.checkedValue = this.coerceBooleanInput(v);
                this.change.emit(this.checkedValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    RadioButtonComponent.prototype.generateClassList = function () {
        var _a;
        var base = 'fj-radio-btn--';
        var classes = (_a = {},
            _a[base + "label-before"] = this.labelPosition === 'before',
            _a[base + "disabled"] = this.disabled,
            _a);
        return classes;
    };
    /**
     * capture on click and toggle state of radio button
     * @param event emitted by html element on click
     */
    RadioButtonComponent.prototype.onRadioButtonClicked = function (event) {
        event.stopPropagation();
        this.toggle();
    };
    RadioButtonComponent.prototype.onChangeEvent = function (event) {
        event.stopPropagation();
    };
    /**
     * Toggle state of checked value and emit on change
     */
    RadioButtonComponent.prototype.toggle = function () {
        this.checked = !this.checked;
        this.change.emit(this.checkedValue);
    };
    RadioButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-radio-button',
                    template: "<label [attr.for]=\"id\"\n       class=\"fj-radio-btn\"\n       [ngClass]=\"generateClassList()\">\n  <input class=\"fj-radio-btn__input\"\n         type=\"radio\"\n         [id]=\"id\"\n         [disabled]=\"disabled\"\n         [tabIndex]=\"tabIndex\"\n         [attr.name]=\"name\"\n         [attr.aria-label]=\"ariaLabel\"\n         [attr.aria-labelledby]=\"ariaLabelledby\"\n         [attr.aria-describedby]=\"ariaDescribedby\"\n         [attr.value]=\"value\"\n         [checked]=\"checked\"\n         (change)=\"onChangeEvent($event)\"\n         (click)=\"onRadioButtonClicked($event)\">\n  <span class=\"fj-radio-btn__label\">\n    <ng-content></ng-content>\n  </span>\n</label>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-radio-btn{display:inline-flex;cursor:pointer;white-space:nowrap;align-items:center;margin-right:.5625rem}.fj-radio-btn__input{display:inline-block;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;height:1.125rem;outline:0;position:relative;width:1.125rem;margin-right:.5625rem}.fj-radio-btn__input::before{display:block;left:0;top:0;background-color:transparent;border:.0625rem solid #1b51a0;content:'';height:1rem;position:absolute;transition:.1s linear;width:1rem;border-radius:1rem}.fj-radio-btn__input::after{display:block;border-bottom:.125rem solid #fff;border-right:.125rem solid #fff;content:'';opacity:0;position:absolute;-webkit-transform:rotate(45deg);transform:rotate(45deg);border:.0625rem solid #1b51a0;border-radius:1em;background-color:#1b51a0;height:.5rem;left:.25rem;top:.25rem;width:.5rem}.fj-radio-btn__input:active::before,.fj-radio-btn__input:focus::before,.fj-radio-btn__input:hover::before{background-color:#dce8f9}.fj-radio-btn__input:checked::after{opacity:1}.fj-radio-btn__input:checked::before{background-color:transparent}.fj-radio-btn__input:checked:active::before,.fj-radio-btn__input:checked:focus::before,.fj-radio-btn__input:checked:hover::before{background-color:#dce8f9}.fj-radio-btn__input:disabled{opacity:.4;cursor:default}.fj-radio-btn__input:disabled::after,.fj-radio-btn__input:disabled:active::after,.fj-radio-btn__input:disabled:focus::after,.fj-radio-btn__input:disabled:hover::after{background-color:#000}.fj-radio-btn__input:disabled:active::before,.fj-radio-btn__input:disabled:focus::before,.fj-radio-btn__input:disabled:hover::before{background-color:transparent}.fj-radio-btn--label-before>input{order:1;margin-left:.5625rem}.fj-radio-btn--disabled{opacity:.5;cursor:auto}"]
                }] }
    ];
    /** @nocollapse */
    RadioButtonComponent.ctorParameters = function () { return []; };
    RadioButtonComponent.propDecorators = {
        id: [{ type: Input }],
        value: [{ type: Input }],
        change: [{ type: Output }],
        checked: [{ type: Input }]
    };
    return RadioButtonComponent;
}(BaseComponent));

var FjRadioButtonModule = /** @class */ (function () {
    function FjRadioButtonModule() {
    }
    FjRadioButtonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [RadioButtonComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [RadioButtonComponent]
                },] }
    ];
    return FjRadioButtonModule;
}());

var CheckboxGridComponent = /** @class */ (function () {
    function CheckboxGridComponent() {
        this.inline = true;
        this.noPadding = false;
        this.noMargin = false;
        this.smallText = false;
        this.checkboxClicked = new EventEmitter();
    }
    CheckboxGridComponent.prototype.ngOnChanges = function (changes) {
        this.makeCheckboxes();
    };
    /**
     * @description Create the internally used array of checkboxes
     */
    CheckboxGridComponent.prototype.makeCheckboxes = function () {
        if (this.checkboxGroup) {
            this.checkboxes = this.checkboxGroup.map(function (item, index) {
                return {
                    index: index,
                    id: item.value + "_" + index,
                    label: item.label,
                    value: item.value,
                    checked: item.checked || false,
                };
            });
        }
    };
    /**
     * @description Notify the parent that a value has changed
     * @param checked the new checked value of the checkbox
     * @param item the internal checkbox model
     */
    CheckboxGridComponent.prototype.updateChecked = function (checked, item) {
        if (item.disabled) {
            return;
        }
        item.checked = checked;
        var toggledItem = this.checkboxGroup[item.index];
        if (toggledItem.hasOwnProperty('checked')) {
            toggledItem.checked = item.checked;
        }
        this.checkboxClicked.emit(toggledItem);
    };
    CheckboxGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-checkbox-grid',
                    template: "<h2 class=\"title\">Main Title</h2>\n<div class=\"grid-form__card-body card-body\" [ngClass]=\"{'no-padding': noPadding, 'no-margin': noMargin, 'small-text': smallText}\">\n  <div *ngIf=\"formGroup\" [formGroup]=\"formGroup\">\n    <div *ngFor=\"let checkbox of checkboxes;\" class=\"form-check\" [ngClass]=\"{'form-check--inline': inline}\">\n      <div class=\"custom-control custom-checkbox\">\n        <input\n          type=\"checkbox\"\n          class=\"custom-control-input\"\n          [value]=\"checkbox.value\"\n          [ngModel]=\"checkbox.checked\"\n          (ngModelChange)=\"updateChecked($event, checkbox)\"\n          [disabled]=\"checkbox.disabled\"\n          [attr.id]=\"checkbox.id\"\n          [attr.name]=\"checkbox.id\" />\n        <label class=\"custom-control-label\" [attr.for]=\"checkbox.id\">{{checkbox.label}}</label>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"!formGroup\" [ngClass]=\"{'no-border': noBorder}\">\n    <div *ngFor=\"let checkbox of checkboxes; \" class=\"form-check\" [ngClass]=\"{'form-check--inline': inline}\">\n      <div class=\"custom-control custom-checkbox\">\n        <input\n          type=\"checkbox\"\n          class=\"custom-control-input\"\n          [value]=\"checkbox.value\"\n          [ngModel]=\"checkbox.checked\"\n          (ngModelChange)=\"updateChecked($event, checkbox)\"\n          [disabled]=\"checkbox.disabled\"\n          [attr.id]=\"checkbox.id\"\n          [attr.name]=\"checkbox.id\" />\n        <label class=\"custom-control-label\" [attr.for]=\"checkbox.id\">{{checkbox.label}}</label>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}"]
                }] }
    ];
    /** @nocollapse */
    CheckboxGridComponent.ctorParameters = function () { return []; };
    CheckboxGridComponent.propDecorators = {
        title: [{ type: Input }],
        checkboxGroup: [{ type: Input }],
        inline: [{ type: Input }],
        noPadding: [{ type: Input }],
        noMargin: [{ type: Input }],
        smallText: [{ type: Input }],
        noBorder: [{ type: Input }],
        formGroup: [{ type: Input }],
        checkboxClicked: [{ type: Output }]
    };
    return CheckboxGridComponent;
}());

var CheckboxGridModule = /** @class */ (function () {
    function CheckboxGridModule() {
    }
    CheckboxGridModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    declarations: [
                        CheckboxGridComponent
                    ],
                    exports: [CheckboxGridComponent]
                },] }
    ];
    return CheckboxGridModule;
}());

/**
 * Count for Next Id
 */
var nextId$3 = 0;
/**
 * Freyja Number Input Component according to specifics of Freyja Design
 */
var NumberInputComponent = /** @class */ (function (_super) {
    __extends(NumberInputComponent, _super);
    function NumberInputComponent() {
        var _this = _super.call(this) || this;
        // This is to make component controlled
        _this.inputValue = '';
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        _this.id = "fj-number-input-" + ++nextId$3;
        /**
         * Allow applying forceful error state of input
         */
        _this.errored = false;
        /**
         * On change event hook, which will be emitted on value change
         */
        _this.change = new EventEmitter();
        return _this;
    }
    /**
     * Capture value change ang emit on change event callback
     * @param event HTML onChange Event
     */
    NumberInputComponent.prototype.onValueChange = function (event) {
        event.stopPropagation();
        this.inputValue = event.target.value;
        this.change.emit(this.inputValue);
    };
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    NumberInputComponent.prototype.generateClassList = function () {
        var _a;
        var classes = (_a = {},
            _a['fj-number-input--' + this.size] = this.size,
            _a['fj-number-input--error'] = this.errored,
            _a);
        return classes;
    };
    NumberInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-number-input',
                    template: "<label [attr.for]=\"id\" class=\"label--medium\">{{label}}</label>\n<input \n  class=\"fj-input\"\n  [ngClass]=\"generateClassList()\"\n  type=\"number\" \n  [id]=\"id\"\n  [tabIndex]=\"tabIndex\"\n  [disabled]=\"disabled\"\n  [attr.name]=\"name\" \n  [placeholder]=\"placeholder\"\n  [attr.value]=\"value\"\n  (change)=\"onValueChange($event)\"\n/>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-input input{box-sizing:border-box;border:.0625rem solid rgba(0,0,0,.15);border-radius:.25rem;color:#000;display:block;font-size:.95rem;font-weight:500;height:2.5rem;margin-top:.25em;outline:0;padding:.5625rem .75rem;transition:.2s linear}.fj-input input:focus{border-color:#1b51a0}.fj-input input:hover{color:rgba(0,0,0,.6)}.fj-input input::-webkit-input-placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-input input::-ms-input-placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-input input::placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-input input::-webkit-input-placeholder:hover .fj-input input::-webkit-input-placeholder{color:rgba(0,0,0,.6)}.fj-input input::-ms-input-placeholder:hover .fj-input input::-ms-input-placeholder{color:rgba(0,0,0,.6)}.fj-input input::placeholder:hover .fj-input input::placeholder{color:rgba(0,0,0,.6)}.fj-input input:disabled{background-color:#f2f2f2;border-color:#f2f2f2;cursor:not-allowed}.fj-input input:disabled::-webkit-input-placeholder{color:rgba(0,0,0,.2)}.fj-input input:disabled::-ms-input-placeholder{color:rgba(0,0,0,.2)}.fj-input input:disabled::placeholder{color:rgba(0,0,0,.2)}.fj-input input--small{height:2rem;font-size:.875rem;padding:.5625rem .625rem}.fj-input input--micro{height:1.5rem;font-size:.75rem;padding:.5625rem .5rem}.fj-input input--required:after{content:\" *\"}.fj-input--error input{border-color:#db0000}label{cursor:pointer;font-size:.875rem}label.label--medium{font-size:.75rem}label.label--disabled{color:rgba(0,0,0,.2)}.input-error{color:#db0000;font-size:.75rem;padding:.5em}.error--label{font-size:.75rem;padding-left:.5em;color:#db0000}"]
                }] }
    ];
    /** @nocollapse */
    NumberInputComponent.ctorParameters = function () { return []; };
    NumberInputComponent.propDecorators = {
        id: [{ type: Input }],
        value: [{ type: Input }],
        errored: [{ type: Input }],
        change: [{ type: Output }]
    };
    return NumberInputComponent;
}(BaseComponent));

var FjNumberInputModule = /** @class */ (function () {
    function FjNumberInputModule() {
    }
    FjNumberInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NumberInputComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        NumberInputComponent
                    ]
                },] }
    ];
    return FjNumberInputModule;
}());

/**
 * Count for Next Id
 */
var nextId$4 = 0;
/**
 * Freyja Text Input Component according to specifics of Freyja Design
 */
var TextInputComponent = /** @class */ (function (_super) {
    __extends(TextInputComponent, _super);
    function TextInputComponent() {
        var _this = _super.call(this) || this;
        /**
         * Represent Internal state of component
         */
        _this.isErrored = false;
        // This is to make component controlled
        _this.inputValue = '';
        /**
         * Unique ID for HTMl Element identifier
         */
        _this.id = "fj-text-input-" + ++nextId$4;
        /**
         * type of the input, default type is text
         */
        _this.type = 'text';
        /**
         * To Apply forceful error state to input component
         */
        _this.errored = false;
        /**
         * checkes if the element should be focused by default
         */
        _this.focused = false;
        /**
         * Callback for value change
         */
        _this.change = new EventEmitter();
        /**
         * Callback for focus event
         */
        _this.focus = new EventEmitter();
        /**
         * Callback for click event
         */
        _this.click = new EventEmitter();
        /**
         * Callback for mouseout event
         */
        _this.mouseout = new EventEmitter();
        return _this;
    }
    TextInputComponent.prototype.ngOnChanges = function () {
        if (this.focused) {
            document.getElementById(this.id).focus();
        }
    };
    /**
      * Capture value change ang emit on change event callback
      * @param event HTML onChange Event
      */
    TextInputComponent.prototype.onValueChange = function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        this.inputValue = event.target.value;
        this.change.emit(this.inputValue);
    };
    /**
     * triggers on focus event
     * @param event HTML onFocus Event
     */
    TextInputComponent.prototype.onFocus = function (event) {
        event.stopPropagation();
        this.focus.emit(this.inputValue);
    };
    /**
     * triggers on click event
     * @param event HTML click Event
     */
    TextInputComponent.prototype.onClick = function (event) {
        event.stopPropagation();
        this.click.emit(this.inputValue);
    };
    /**
     * Capture value change ang emit on mouseout event callback
     * @param event HTML onChange Event
     */
    TextInputComponent.prototype.onMouseOut = function (event) {
        event.stopPropagation();
        this.inputValue = event.target.value;
        this.mouseout.emit(this.inputValue);
    };
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    TextInputComponent.prototype.generateClassList = function () {
        var _a;
        var classes = (_a = {},
            _a['fj-input--' + this.size] = this.size,
            _a['fj-input--required'] = this.required,
            _a['fj-input--error'] = this.errored || this.error,
            _a);
        return classes;
    };
    TextInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-text-input',
                    template: "<div class=\"fj-input\" [ngClass]=\"generateClassList()\" [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <label\n    [attr.for]=\"id\"\n    class=\"label--medium\"\n    *ngIf=\"label\"\n    >{{label}}</label>\n  <input\n    type=\"{{type}}\"\n    [ngStyle]=\"customStyles\"\n    [id]=\"id\"\n    [tabIndex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    [attr.name]=\"name\"\n    [placeholder]=\"placeholder\"\n    formControlName=\"{{controlName}}\"\n    [attr.value]=\"value\"\n    (click)=\"onClick($event)\"\n    (change)=\"onValueChange($event)\"\n    (focus)=\"onFocus($event)\"\n    (mouseout)=\"onMouseOut($event)\"\n  />\n  <label class=\"error--label\" *ngIf=\"error\">{{error}}</label>\n</div>\n<!-- Input without reactive forms-->\n<div class=\"fj-input\" [ngClass]=\"generateClassList()\" *ngIf=\"!formGroup\">\n  <label\n    [attr.for]=\"id\"\n    class=\"label--medium\"\n    *ngIf=\"label\"\n  >{{label}}</label>\n  <input\n    type=\"{{type}}\"\n    [ngStyle]= \"customStyles\"\n    [id]=\"id\"\n    [tabIndex]=\"tabIndex\"\n    [disabled]=\"disabled\"\n    [attr.name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [attr.value]=\"value\"\n    (click)=\"onClick($event)\"\n    (change)=\"onValueChange($event)\"\n    (focus)=\"onFocus($event)\"\n    (mouseout)=\"onMouseOut($event)\"\n  />\n  <label class=\"error--label\" *ngIf=\"error\">{{error}}</label>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-input input{box-sizing:border-box;border:.0625rem solid rgba(0,0,0,.15);border-radius:.25rem;color:#000;display:block;font-size:.95rem;font-weight:500;height:2.5rem;margin-top:.25em;outline:0;padding:.5625rem .75rem;transition:.2s linear}.fj-input input:focus{border-color:#1b51a0}.fj-input input:hover{color:rgba(0,0,0,.6)}.fj-input input::-webkit-input-placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-input input::-ms-input-placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-input input::placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-input input::-webkit-input-placeholder:hover .fj-input input::-webkit-input-placeholder{color:rgba(0,0,0,.6)}.fj-input input::-ms-input-placeholder:hover .fj-input input::-ms-input-placeholder{color:rgba(0,0,0,.6)}.fj-input input::placeholder:hover .fj-input input::placeholder{color:rgba(0,0,0,.6)}.fj-input input:disabled{background-color:#f2f2f2;border-color:#f2f2f2;cursor:not-allowed}.fj-input input:disabled::-webkit-input-placeholder{color:rgba(0,0,0,.2)}.fj-input input:disabled::-ms-input-placeholder{color:rgba(0,0,0,.2)}.fj-input input:disabled::placeholder{color:rgba(0,0,0,.2)}.fj-input input--small{height:2rem;font-size:.875rem;padding:.5625rem .625rem}.fj-input input--micro{height:1.5rem;font-size:.75rem;padding:.5625rem .5rem}.fj-input input--required:after{content:\" *\"}.fj-input--error input{border-color:#db0000}label{cursor:pointer;font-size:.875rem}label.label--medium{font-size:.75rem}label.label--disabled{color:rgba(0,0,0,.2)}.input-error{color:#db0000;font-size:.75rem;padding:.5em}.error--label{font-size:.75rem;padding-left:.5em;color:#db0000}"]
                }] }
    ];
    /** @nocollapse */
    TextInputComponent.ctorParameters = function () { return []; };
    TextInputComponent.propDecorators = {
        id: [{ type: Input }],
        customStyles: [{ type: Input }],
        value: [{ type: Input }],
        type: [{ type: Input }],
        errored: [{ type: Input }],
        focused: [{ type: Input }],
        error: [{ type: Input }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        click: [{ type: Output }],
        mouseout: [{ type: Output }],
        controlName: [{ type: Input }],
        formGroup: [{ type: Input }]
    };
    return TextInputComponent;
}(BaseComponent));

var FjTextInputModule = /** @class */ (function () {
    function FjTextInputModule() {
    }
    FjTextInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TextInputComponent],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule
                    ],
                    exports: [
                        TextInputComponent
                    ]
                },] }
    ];
    return FjTextInputModule;
}());

var CLOUD_CDN_URL = 'https://storage.googleapis.com/svgicons';
var SvgIcon = /** @class */ (function () {
    function SvgIcon(data) {
        if (!!data.nodeName) {
            this.svgElement = data;
        }
        else {
            this.url = data;
        }
    }
    return SvgIcon;
}());
var IconRegistryService = /** @class */ (function () {
    function IconRegistryService(httpClient, sanitizer) {
        this.httpClient = httpClient;
        this.sanitizer = sanitizer;
        this.svgIcons = new Map();
        this.inProgressUrlFetches = new Map();
    }
    IconRegistryService.prototype.loadSvgIconFromConfig = function (config) {
        var _this = this;
        return this.fetchUrl(config.url)
            .pipe(map(function (svgText) { return _this.createSvgElementForSingleIcon(svgText); }));
    };
    IconRegistryService.prototype.createSvgElementForSingleIcon = function (responseText) {
        var svg = this.svgElementFromString(responseText);
        svg.setAttribute('fit', '');
        svg.setAttribute('height', '100%');
        svg.setAttribute('width', '100%');
        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        svg.setAttribute('focusable', 'false');
        return svg;
    };
    IconRegistryService.prototype.svgElementFromString = function (str) {
        var div = document.createElement('DIV');
        div.innerHTML = str;
        var svg = div.querySelector('svg');
        if (!svg) {
            throw Error('<svg> tag not found');
        }
        return svg;
    };
    IconRegistryService.prototype.fetchUrl = function (safeUrl) {
        var _this = this;
        var url = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
        var inProgressFetch = this.inProgressUrlFetches.get(url);
        if (inProgressFetch) {
            return inProgressFetch;
        }
        var req = this.httpClient.get(url, {
            responseType: 'text', headers: new HttpHeaders({
                'Access-Control-Allow-Origin': '*'
            })
        }).pipe(finalize(function () { return _this.inProgressUrlFetches.delete(url); }), share());
        this.inProgressUrlFetches.set(url, req);
        return req;
    };
    IconRegistryService.prototype.addSvgIcon = function (iconName) {
        var url = this.sanitizer.bypassSecurityTrustResourceUrl(CLOUD_CDN_URL + "/" + iconName + ".svg");
        this.svgIcons.set(iconName, new SvgIcon(url));
        return this.getNamedSvgIcon(iconName);
    };
    IconRegistryService.prototype.getNamedSvgIcon = function (name) {
        var config = this.svgIcons.get(name);
        if (config) {
            if (config.svgElement) {
                return of(cloneSvg(config.svgElement));
            }
            else {
                return this.loadSvgIconFromConfig(config).pipe(tap(function (svg) { return config.svgElement = svg; }), map(function (svg) { return cloneSvg(svg); }));
            }
        }
    };
    IconRegistryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IconRegistryService.ctorParameters = function () { return [
        { type: HttpClient, decorators: [{ type: Optional }] },
        { type: DomSanitizer }
    ]; };
    IconRegistryService.ngInjectableDef = defineInjectable({ factory: function IconRegistryService_Factory() { return new IconRegistryService(inject(HttpClient, 8), inject(DomSanitizer)); }, token: IconRegistryService, providedIn: "root" });
    return IconRegistryService;
}());
function cloneSvg(svg) {
    return svg.cloneNode(true);
}

/**
 * Freyja SVG ICON Component according to specifics of Freyja Design
 */
var SvgIconComponent = /** @class */ (function (_super) {
    __extends(SvgIconComponent, _super);
    /**
     * Capture reference to element ref to inject svg into html
     * @param _iconRegistryService Icon Registry service to pull and cache icons
     * @param _elementRef Reference to Component HTML to inject SVG
     */
    function SvgIconComponent(_iconRegistryService, _elementRef) {
        var _this = _super.call(this) || this;
        _this._iconRegistryService = _iconRegistryService;
        _this._elementRef = _elementRef;
        /**
         * Name of icon or svg file to be pulled from cdn/repository
         */
        _this.svgName = '';
        /**
         * If it's going to be inline to other content
         */
        _this.inline = true;
        _this.iconClass = '';
        _this.fillColor = '#BFBFBF';
        _this.display = 'inline-flex';
        _this.opacity = 1;
        return _this;
    }
    /**
     * Load Icon SCG from Service
     */
    SvgIconComponent.prototype.ngOnInit = function () {
        this.loadSvgIconByName();
    };
    /**
     * Method to call registry service to get icon svg
     */
    SvgIconComponent.prototype.loadSvgIconByName = function () {
        var _this = this;
        if (this.svgName) {
            this._iconRegistryService.addSvgIcon(this.svgName).pipe(take(1)).subscribe(function (svg) { return _this.insertSvgElement(svg); }, function (err) { return console.log("Error retrieving icon: " + err.message); });
        }
    };
    /**
     * Insert SVG content to component nativeElement
     * @param svg SVG content for icon fetch from service
     */
    SvgIconComponent.prototype.insertSvgElement = function (svg) {
        this.clearSvgElement();
        this._elementRef.nativeElement.appendChild(svg);
    };
    /**
     * Clear Component SVG before inserting
     */
    SvgIconComponent.prototype.clearSvgElement = function () {
        var layoutElement = this._elementRef.nativeElement;
        var childCount = layoutElement.childNodes.length;
        for (var i = 0; i < childCount; i++) {
            layoutElement.removeChild(layoutElement.childNodes[i]);
        }
    };
    /**
     * Capture on change and update classes
     */
    SvgIconComponent.prototype.ngOnChanges = function () {
        this.generateClass();
    };
    /**
     * @description Generates the class for the icon
     */
    SvgIconComponent.prototype.generateClass = function () {
        this.class = this.iconClass + " "
            + ((this.fillColor ? 'icon--fill--' + this.fillColor : '') + " ")
            + ("" + (this.strokeColor ? 'icon--stroke--' + this.strokeColor : ''));
    };
    SvgIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-svg-icon',
                    template: "",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["svg{width:24px;height:24px}"]
                }] }
    ];
    /** @nocollapse */
    SvgIconComponent.ctorParameters = function () { return [
        { type: IconRegistryService },
        { type: ElementRef }
    ]; };
    SvgIconComponent.propDecorators = {
        svgName: [{ type: Input }],
        inline: [{ type: Input }],
        iconClass: [{ type: Input }],
        width: [{ type: Input }],
        fillColor: [{ type: Input }],
        strokeColor: [{ type: Input }],
        display: [{ type: Input }],
        opacity: [{ type: Input }]
    };
    return SvgIconComponent;
}(BaseComponent));

var FjSvgIconModule = /** @class */ (function () {
    function FjSvgIconModule() {
    }
    FjSvgIconModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SvgIconComponent],
                    imports: [
                        CommonModule,
                        HttpClientModule
                    ],
                    exports: [SvgIconComponent]
                },] }
    ];
    return FjSvgIconModule;
}());

/**
 * Counter for Next Id
 */
var nextId$5 = 0;
/**
 * Freyja Accordion Component according to specifics of Freyja Design
 */
var AccordionComponent = /** @class */ (function (_super) {
    __extends(AccordionComponent, _super);
    function AccordionComponent() {
        var _this = _super.call(this) || this;
        // This is to make component open state controlled
        _this.isOpen = false;
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        _this.id = "fj-accordion-" + ++nextId$5;
        /**
         * Will emit if open state get's changed on click
         */
        _this.change = new EventEmitter(false);
        return _this;
    }
    Object.defineProperty(AccordionComponent.prototype, "open", {
        /**
         * Will determine if acordion is expanded or not
         */
        get: function () {
            return this.isOpen;
        },
        set: function (val) {
            if (val !== this.isOpen) {
                this.isOpen = this.coerceBooleanInput(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Will toggle open state and emit on Change event
     * @param evt HTML Click Event
     */
    AccordionComponent.prototype.toggleState = function (evt) {
        evt.stopPropagation();
        this.open = !this.open;
        this.change.emit(this.open);
    };
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    AccordionComponent.prototype.generateClassList = function () {
        var _a;
        var base = 'fj-accordion--';
        var classes = (_a = {},
            _a[base + "open"] = this.open,
            _a[base + "disabled"] = this.disabled,
            _a[base + "label-after"] = this.labelPosition === 'after',
            _a);
        return classes;
    };
    AccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-accordion',
                    template: "<div class=\"fj-accordion\"\n     [id]=\"id\"\n     [ngClass]=\"generateClassList()\">\n  <div class=\"fj-accordion__header\"\n       (click)=\"toggleState($event)\">\n    <label>{{label}}</label>\n  </div>\n  <div class=\"fj-accordion__content\">\n    <ng-content></ng-content>\n  </div>\n</div>",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-accordion label{display:block;font-weight:700;padding-bottom:.6875rem;padding-top:.6875rem;transition:.2s linear;cursor:pointer}.fj-accordion label::before{border-right:1px solid;border-top:1px solid;content:'';display:inline-block;height:6px;margin:0 1rem 0 .25rem;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-transform-origin:80% 40%;transform-origin:80% 40%;transition:.2s linear;width:6px}.fj-accordion__header{display:flex;cursor:pointer}.fj-accordion__content{max-height:0;opacity:0;overflow:hidden;padding:0 1.25rem;transition:.2s linear .1s;border:1px solid rgba(0,0,0,.15)}.fj-accordion--disabled{color:rgba(0,0,0,.25);pointer-events:none}.fj-accordion--open .fj-accordion__content{max-height:15em;opacity:1;overflow:auto;padding:.6875rem 1.25rem}.fj-accordion--open label::before{-webkit-transform:rotate(135deg);transform:rotate(135deg)}.fj-accordion--label-after>div{justify-content:flex-end}"]
                }] }
    ];
    /** @nocollapse */
    AccordionComponent.ctorParameters = function () { return []; };
    AccordionComponent.propDecorators = {
        id: [{ type: Input }],
        open: [{ type: Input }],
        change: [{ type: Output }]
    };
    return AccordionComponent;
}(BaseComponent));

var FjAccordionModule = /** @class */ (function () {
    function FjAccordionModule() {
    }
    FjAccordionModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AccordionComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        AccordionComponent
                    ]
                },] }
    ];
    return FjAccordionModule;
}());

var ContentSwitcherComponent = /** @class */ (function () {
    function ContentSwitcherComponent() {
        /**
         * content switcher options
         */
        this.options = [];
        /**
         * event triggered when an option is selected
         */
        this.optionSelected = new EventEmitter();
        /**
         * the id of the active tab
         */
        this.activeTab = 0;
    }
    ContentSwitcherComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.selectedOption) {
            this.activeTab = this.options.findIndex(function (option) { return _this.selectedOption.toString() === option.value.toString(); });
        }
    };
    /**
     *
     * @param index - index of the selected element
     * @param value - value of the selected element
     */
    ContentSwitcherComponent.prototype.selectOption = function (index, value) {
        this.activeTab = index;
        var selectedElement = {
            index: index,
            value: value
        };
        this.optionSelected.emit(selectedElement);
    };
    ContentSwitcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-content-switcher',
                    template: "<div class=\"content-switcher content-switcher--radius\">\n  <button *ngFor=\"let option of options; let i = index\"\n          class=\"content-switcher__tab\"\n          [ngClass]=\"{'content-switcher__tab--is-active': activeTab === i}\"\n          (click)=\"selectOption(i, option.value)\">\n    {{option.label}}\n  </button>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.content-switcher{display:flex;flex-wrap:wrap;font-family:open-sans,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\"}.content-switcher--rounded .content-switcher__tab:first-child{border-bottom-left-radius:2rem;border-top-left-radius:2rem}.content-switcher--rounded .content-switcher__tab:last-child{border-bottom-right-radius:2rem;border-top-right-radius:2rem}.content-switcher--radius .content-switcher__tab:first-child{border-right:0;border-bottom-left-radius:4px;border-top-left-radius:4px}.content-switcher--radius .content-switcher__tab:last-child{border-left:0;border-bottom-right-radius:4px;border-top-right-radius:4px}.content-switcher__tab{border:1px solid #1b51a0;color:#1b51a0;cursor:pointer;font-family:open-sans,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-size:.875rem;height:40px;min-width:104px;outline:0}.content-switcher__tab:hover{background-color:#dce8f9}.content-switcher__tab--is-active{background-color:#1b51a0!important;color:#fff;pointer-events:none}.content-switcher--sm .content-switcher__tab{font-size:.8125rem;height:32px}.content-switcher--disabled .content-switcher__tab{border-color:rgba(0,0,0,.15);color:var(--color-gray);pointer-events:none}.content-switcher--disabled .content-switcher__tab--is-active{background-color:rgba(0,0,0,.15);border-color:transparent;color:#fff}"]
                }] }
    ];
    ContentSwitcherComponent.propDecorators = {
        options: [{ type: Input }],
        selectedOption: [{ type: Input }],
        optionSelected: [{ type: Output }]
    };
    return ContentSwitcherComponent;
}());

var FjContentSwitcherModule = /** @class */ (function () {
    function FjContentSwitcherModule() {
    }
    FjContentSwitcherModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [ContentSwitcherComponent],
                    declarations: [ContentSwitcherComponent]
                },] }
    ];
    return FjContentSwitcherModule;
}());

var LightBoxComponent = /** @class */ (function () {
    function LightBoxComponent() {
        /**
         * checks if the lightbox is open
         */
        this.isOpen = false;
        /**
         * current image slide index
         */
        this.currentSlideIndex = 1;
    }
    LightBoxComponent.prototype.ngOnInit = function () {
    };
    /**
     * opens the lightbox modal and set the current slide
     * slideNumber - the seleceted slide number
     */
    LightBoxComponent.prototype.openModal = function (slideNumber) {
        if (this.slides) {
            this.isOpen = true;
            this.currentSlide(slideNumber);
        }
    };
    /**
     * closes the lightbox modal
     */
    LightBoxComponent.prototype.closeModal = function () {
        this.isOpen = false;
    };
    // Next/previous controls
    LightBoxComponent.prototype.plusSlides = function (n) {
        this.showSlides(this.currentSlideIndex += n);
    };
    // Thumbnail image controls
    LightBoxComponent.prototype.currentSlide = function (n) {
        this.showSlides(this.currentSlideIndex = n);
    };
    /**
     * show the slides in the lightbox modal
     * @param n - slide number
     */
    LightBoxComponent.prototype.showSlides = function (n) {
        if (n > this.slides.length) {
            this.currentSlideIndex = 1;
        }
        else if (n < 1) {
            this.currentSlideIndex = this.slides.length;
        }
        this.slides.forEach(function (slide) {
            slide.hidden = true;
        });
        this.slides[this.currentSlideIndex - 1].hidden = false;
    };
    LightBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-light-box',
                    template: "<!-- The Modal/Lightbox -->\n<div class=\"lightbox__modal\" [ngClass]=\"{'lightbox__modal__shown': isOpen}\" *ngIf=\"slides\">\n  <span class=\"lightbox__modal__close lightbox__modal__cursor\" (click)=\"closeModal()\">&times;</span>\n  <div class=\"lightbox__modal__content\">\n\n    <div class=\"lightbox__slides\" *ngFor=\"let slide of slides; let i = index\"  [ngClass]=\"{'lightbox__slides__hidden': slide.hidden}\">\n      <div class=\"lightbox__number\">{{i + 1}} / {{slides.length}}</div>\n      <div class=\"lightbox__image\" [ngStyle]=\"{'background-image': 'url(' + slide?.src + ')'}\">\n    </div>\n\n    <!-- Next/previous controls -->\n    <a class=\"lightbox__prev\" (click)=\"plusSlides(-1)\">&#10094;</a>\n    <a class=\"lightbox__next\" (click)=\"plusSlides(1)\">&#10095;</a>\n\n    <!-- Caption text -->\n    <div class=\"lightbox__caption-container\">\n      <p id=\"lightbox__caption\">{{slides[currentSlideIndex - 1]?.alt}}</p>\n    </div>\n\n    <!-- Thumbnail image controls -->\n    <div class=\"lightbox__row\">\n      <div class=\"lightbox__column\" *ngFor=\"let slide of slides; let j = index\">\n        <div class=\"lightbox__thumbnail\" [ngStyle]=\"{'background-image': 'url(' + slide?.src + ')'}\" (click)=\"currentSlide(j + 1)\" [ngClass]=\"{'lightbox__thumbnail__active': !slide.hidden}\">\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.lightbox__row{display:flex;background-color:#000}.lightbox__column{width:25%}.lightbox__modal{display:none;position:fixed;z-index:999;padding:3.75rem 0;box-sizing:border-box;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:#000}.lightbox__modal__shown{display:block}.lightbox__modal__content{position:relative;background-color:#fefefe;margin:auto;padding:0;width:90%;max-width:75rem;height:100vh}.lightbox__modal__close{color:#fff;position:absolute;top:10px;right:25px;font-size:35px;font-weight:700}.lightbox__modal__close:focus,.lightbox__modal__close:hover{color:#999;text-decoration:none;cursor:pointer}.lightbox__slides{display:block;height:100%}.lightbox__slides__hidden{display:none}.lightbox__next,.lightbox__prev{cursor:pointer;position:absolute;top:50%;width:auto;padding:16px;margin-top:-50px;color:#fff;font-weight:700;font-size:20px;transition:.6s;border-radius:0 3px 3px 0;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-user-select:none}.lightbox__next:hover,.lightbox__prev:hover{background-color:rgba(0,0,0,.8)}.lightbox__next{right:0;border-radius:3px 0 0 3px}.lightbox__number{color:#f2f2f2;font-size:12px;padding:8px 12px;position:absolute;top:0}.lightbox__image{height:100%;width:100%;background-size:cover}.lightbox__caption-container{text-align:center;background-color:#000;padding:2px 16px;color:#fff}.lightbox__thumbnail{opacity:1;cursor:pointer;width:100%;height:9.375rem;background-size:cover}.lightbox__thumbnail:hover,.lightbox__thumbnail__active{opacity:.6}.lightbox__hover-shadow{transition:.3s}.lightbox__hover-shadow:hover{box-shadow:0 4px 8px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19)}"]
                }] }
    ];
    /** @nocollapse */
    LightBoxComponent.ctorParameters = function () { return []; };
    LightBoxComponent.propDecorators = {
        slides: [{ type: Input }]
    };
    return LightBoxComponent;
}());

var CardItemComponent = /** @class */ (function () {
    function CardItemComponent(eRef) {
        this.eRef = eRef;
        /**
         * event triggered when an action is clicked
         */
        this.actionClicked = new EventEmitter();
        /**
         * event triggered when an element is edited
         */
        this.elementEdited = new EventEmitter();
        /**
         * checks if a click event is a single ou double click
         * {boolean}
         */
        this.isSingleClick = false;
        /**
         * checks wether the card item elements are in edit mode
         * {boolean}
         */
        this.isEdit = {
            title: false,
            subText: false,
            subText2: false,
            caption: false,
            link: false,
            date1: false,
            date2: false,
            dateHeader1: false,
            dateHeader2: false,
            details: false,
            description: false,
            tags: false
        };
        this.showBelowMenu = false;
        this.inputFieldStyles = { marginTop: 0, width: '100%' };
    }
    CardItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        // init dynamic details field isEdit value to false
        if (this.options && this.options.details) {
            this.options.details.forEach(function (detailItem, index) {
                _this.isEdit['detailItem' + index] = false;
            });
        }
    };
    /**
     * fired when an action has been clicked
     * @param evt - click event
     * @param actionType - type of the action that has been fired
     */
    CardItemComponent.prototype.onActionClicked = function (evt, actionType) {
        if (evt.stopPropagation) {
            evt.stopPropagation();
        }
        else {
            actionType = evt;
        }
        this.actionClicked.emit(actionType);
    };
    /**
     * activates edit mode for one field
     * @param evt - click event
     * @param field - field to be edited
     */
    CardItemComponent.prototype.activateEditMode = function (evt, field) {
        this.isSingleClick = false;
        this.isEdit[field] = true;
    };
    /**
     * deactivates edit mode for all fields
     */
    CardItemComponent.prototype.deactivateEditMode = function () {
        this.isEdit = {
            title: false,
            subText: false,
            subText2: false,
            caption: false,
            link: false,
            date1: false,
            date2: false,
            dateHeader1: false,
            dateHeader2: false,
            details: false,
            description: false,
            tags: false
        };
    };
    /**
     * toggles expanded view on single click
     */
    CardItemComponent.prototype.toggleExpanded = function () {
        var _this = this;
        // deactivate any active edit mode
        this.isSingleClick = true;
        setTimeout(function () {
            if (_this.isSingleClick) {
                _this.deactivateEditMode();
                _this.isExpanded = !_this.isExpanded;
            }
        }, 250);
    };
    /**
     * a function that will be triggered when an editable input is focused and it will deactivate the edit mode for other inputs
     * @param {string} element - element  is edited
     */
    CardItemComponent.prototype.onInputFocused = function (element) {
        var _this = this;
        Object.keys(this.isEdit).forEach(function (key) {
            if (key !== element && _this.isEdit[key]) {
                _this.isEdit[key] = false;
            }
        });
    };
    /**
     * a function that is triggered when the card item picture is clicked and it sets the image in the lightbox component
     */
    CardItemComponent.prototype.onPictureClicked = function () {
        if (this.item[this.options.picture.image] && this.item[this.options.title.prop]) {
            this.lightBoxImages = [
                {
                    src: this.item[this.options.picture.image],
                    alt: this.item[this.options.title.prop]
                }
            ];
            this.lightBox.openModal(1);
        }
    };
    /**
     * a function that will be triggered when an item has been edited
     * @param {string} value - value of the edited element
     * @param {string} element - element that is edited
     * @param {number} index of the element in case of dynamic fields like details blocks
     */
    CardItemComponent.prototype.onEditElement = function (value, element, index) {
        this.isEdit[element] = false;
        var editObj = {
            element: element,
            value: value,
            index: index
        };
        this.elementEdited.emit(editObj);
    };
    CardItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-card-item',
                    template: "<div class=\"card-item\" [ngClass]=\"{'card-item--vertical': layout === 'vertical', 'card-item--horizontal': layout === 'horizontal'}\">\n  <div class=\"card-item__content\" [ngClass]=\"{\n    'card-item__content--highlight':isHighlight,\n    'card-item__content--vertical--expanded': isExpanded && layout === 'vertical',\n    'card-item__content--horizontal--expanded': isExpanded && layout === 'horizontal',\n    'card-item__content--vertical': layout === 'vertical',\n    'card-item__content--horizontal': layout === 'horizontal'\n    }\">\n    <div class=\"card-item__header\" (click)=\"toggleExpanded()\" [ngClass]=\"{'card-item__header--vertical': layout === 'vertical', 'card-item__header--horizontal': layout === 'horizontal'}\">\n      <ng-content select=\"[card-item-header]\" ></ng-content>\n      <ng-container *ngIf=\"item\">\n        <!-- Image exists-->\n        <div class=\"card-item__picture\"\n             *ngIf=\"options?.picture && item[options?.picture?.thumbnail]\"\n             [ngStyle]=\"{'background-image': 'url(' + item[options.picture.thumbnail] + ')'}\"\n             [ngClass]=\"{'card-item__picture--vertical': layout === 'vertical', 'card-item__picture--horizontal': layout === 'horizontal'}\"\n             (click)=\"onPictureClicked()\"\n        >\n        </div>\n        <!-- No Image available-->\n        <div class=\"card-item__picture\"\n             (click)=\"file.click()\"\n             *ngIf=\"options?.picture && !item[options?.picture?.thumbnail]\"\n             [ngClass]=\"{'card-item__picture--vertical': layout === 'vertical', 'card-item__picture--horizontal': layout === 'horizontal'}\"\n        >\n          <fj-icon [svgName]=\"'upload'\"></fj-icon>\n        </div>\n        <input type=\"file\" accept=\"image/*\" hidden #file>\n        <div class=\"card-item__title__container\" *ngIf=\"options?.title || options?.subText || options?.subText2\" [ngClass]=\"{'card-item__title__container--vertical': layout === 'vertical', 'card-item__title__container--horizontal': layout === 'horizontal'}\">\n          <h3 class=\"card-item__title__heading card-item__editable\" (dblclick)=\"activateEditMode($event, 'title')\" *ngIf=\"options?.title && isEdit.title === false\">{{item[options?.title?.prop]}}</h3>\n          <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.title }\"\n                         [focused]=\"isEdit.title\"\n                         (change)=\"onEditElement($event, 'title')\"\n                         [value]=\"item[options?.title?.prop]\"\n                         (focus)=\"onInputFocused('title')\"\n                         [customStyles]=\"inputFieldStyles\">\n          </fj-text-input>\n          <div class=\"card-item__title__subtext\">\n            <p *ngIf=\"options?.subText && isEdit.subText === false\" class=\"card-item__editable\" (dblclick)=\"activateEditMode($event, 'subText')\">{{item[options?.subText?.prop]}}</p>\n            <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.subText }\"\n                           [focused]=\"isEdit.subText\"\n                           (focus)=\"onInputFocused('subText')\"\n                           (change)=\"onEditElement($event, 'subText')\"\n                           [value]=\"item[options?.subText?.prop]\"\n                           [customStyles]=\"inputFieldStyles\">\n\n            </fj-text-input>\n            <p *ngIf=\"options?.subText2 && isEdit.subText2 === false\" class=\"card-item__editable\" (dblclick)=\"activateEditMode($event, 'subText2')\">{{item[options?.subText2?.prop]}}</p>\n            <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.subText2}\"\n                           [focused]=\"isEdit.subText2\"\n                           (focus)=\"onInputFocused('subText2')\"\n                           (change)=\"onEditElement($event, 'subText2')\"\n                           [value]=\"item[options?.subText2?.prop]\"\n                           [customStyles]=\"inputFieldStyles\">\n\n            </fj-text-input>\n          </div>\n        </div>\n        <div class=\"card-item__right__container\" *ngIf=\"options?.caption || options?.link\" [ngClass]=\"{'card-item__right__container--vertical': layout === 'vertical', 'card-item__right__container--horizontal': layout === 'horizontal'}\">\n          <span class=\"card-item__right__caption card-item__editable\" *ngIf=\"options?.caption  && isEdit.caption === false\" (dblclick)=\"activateEditMode($event, 'caption')\">{{item[options?.caption?.prop]}}</span>\n          <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.caption}\"\n                         [focused]=\"isEdit.caption\"\n                         (change)=\"onEditElement($event, 'caption')\"\n                         [value]=\"item[options?.caption?.prop]\"\n                         [customStyles]=\"inputFieldStyles\">\n          </fj-text-input>\n          <a class=\"card-item__right__link card-item__editable\" *ngIf=\"options?.link && isEdit.link === false\" (dblclick)=\"activateEditMode($event, 'link')\">{{item[options?.link?.prop]}}</a>\n          <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.link}\"\n                         [focused]=\"isEdit.link\"\n                         (change)=\"onEditElement($event, 'link')\"\n                         [value]=\"item[options?.link?.prop]\"\n                         [customStyles]=\"inputFieldStyles\">\n\n          </fj-text-input>\n          <div class=\"card-item__right__date caption-text\">\n            <span *ngIf=\"options?.dateHeader1 && isEdit.dateHeader1 === false\">{{options?.dateHeader1.label}} {{item[options?.dateHeader1?.prop] | date: 'dd.MM.yyyy' }}</span>\n            <span *ngIf=\"options?.dateHeader1\"> | </span>\n            <span *ngIf=\"options?.dateHeader2 && isEdit.dateHeader2 === false\">{{options?.dateHeader2.label}} {{item[options?.dateHeader1?.prop] | date: 'dd.MM.yyyy'}}</span>\n          </div>\n        </div>\n        <div class=\"card-item__actions__container\" [ngClass]=\"{'card-item__actions__container--vertical': layout === 'vertical', 'card-item__actions__container--horizontal': layout === 'horizontal'}\"\n             *ngIf=\"options?.secondaryAction || options?.primaryAction || options?.otherActions\"\n        >\n          <fj-button class=\"card-item__actions__item\" color=\"light\" size=\"small\" *ngIf=\"options?.secondaryAction\" (click)=\"onActionClicked($event, options?.secondaryAction.value)\">{{options?.secondaryAction.label}}</fj-button>\n          <fj-button class=\"card-item__actions__item\" *ngIf=\"options?.primaryAction\" size=\"small\" (click)=\"onActionClicked($event, options?.primaryAction.value)\">{{options?.primaryAction.label}}</fj-button>\n          <fj-native-dropdown class=\"card-item__actions__item\" *ngIf=\"options?.otherActions\" size=\"small\" [options]=\"options?.otherActions\" [customStyles]=\"{'borderColor': 'rgba(27, 81, 160, 1)','width' : '40px'}\" [showDefaultOnCLick]=\"true\" (optionSelected)=\"onActionClicked($event)\"></fj-native-dropdown>\n        </div>\n      </ng-container>\n\n    </div>\n    <div *ngIf=\"isExpanded\" class=\"card-item__divider\"></div>\n    <div *ngIf=\"isExpanded\" class=\"card-item__body\" [ngClass]=\"{'card-item__body--vertical': layout === 'vertical', 'card-item__body--horizontal': layout === 'horizontal'}\">\n      <ng-container *ngIf=\"item && (options?.date1 || options?.date2 || options?.details || options?.description || options?.tags)\">\n        <div class=\"card-item__body__date caption-text\">\n          <span *ngIf=\"options?.date1 && isEdit.date1 === false\">{{options?.date1.label}} {{item[options?.date1?.prop] | date: 'dd.MM.yyyy' }}</span>\n          <!-- uncomment to add editable field for date1 -->\n          <!--<fj-text-input [ngClass]=\"{'card-item__editable__input&#45;&#45;hidden' : !isEdit.date1}\"-->\n          <!--[focused]=\"isEdit.date1\"-->\n          <!--(change)=\"onEditElement($event, 'date1')\"-->\n          <!--[value]=\"item[options?.date1?.prop]\"-->\n          <!--[customStyles]=\"inputFieldStyles\">-->\n\n          <!--</fj-text-input>-->\n          <span *ngIf=\"options?.date1\"> | </span>\n          <span *ngIf=\"options?.date2 && isEdit.date2 === false\">{{options?.date2.label}} {{item[options?.date1?.prop] | date: 'dd.MM.yyyy'}}</span>\n          <!-- uncomment to add editable field for date2 -->\n          <!--<fj-text-input [ngClass]=\"{'card-item__editable__input&#45;&#45;hidden' : !isEdit.date2}\"-->\n          <!--[focused]=\"isEdit.date2\"-->\n          <!--(change)=\"onEditElement($event, 'date2')\"-->\n          <!--[value]=\"item[options?.date1?.prop]\"-->\n          <!--[customStyles]=\"inputFieldStyles\">-->\n\n          <!--</fj-text-input>-->\n        </div>\n        <div class=\"card-item__body__details\" *ngIf=\"options?.details\">\n          <ng-container *ngFor=\"let detailItem of options?.details; let i = index\">\n            <div class=\"card-item__body__details__item\">\n              <div class=\"caption-text\">\n                {{detailItem.label}}\n              </div>\n              <div class=\"card-item__editable card-item__editable--no-padding\" *ngIf=\"detailItem && isEdit['detailItem'+ i] === false\" (dblclick)=\"activateEditMode($event, 'detailItem'+i)\">\n                {{item[detailItem?.prop]}}\n              </div>\n              <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit['detailItem'+ i]}\"\n                             [focused]=\"isEdit['detailItem'+ i]\"\n                             (focus)=\"onInputFocused('detailItem'+ i)\"\n                             (change)=\"onEditElement($event, 'details', i)\"\n                             [value]=\"item[detailItem?.prop]\"\n                             [customStyles]=\"inputFieldStyles\">\n\n              </fj-text-input>\n            </div>\n          </ng-container>\n        </div>\n        <div class=\"card-item__body__description\">\n          <div class=\"caption-text\">\n            {{options?.description.label}}\n          </div>\n          <div  class=\"card-item__editable card-item__editable--no-padding\" *ngIf=\"options?.description && isEdit.description === false\" (dblclick)=\"activateEditMode($event, 'description')\">\n            {{item[options?.description?.prop]}}\n          </div>\n          <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.description}\"\n                         [focused]=\"isEdit.description\"\n                         (focus)=\"onInputFocused('description')\"\n                         (change)=\"onEditElement($event, 'description')\"\n                         [value]=\"item[options?.description?.prop]\"\n                         [customStyles]=\"inputFieldStyles\">\n\n          </fj-text-input>\n        </div>\n        <div class=\"card-item__body__tags\" *ngIf=\"options?.tags && isEdit.tags === false\" (dblclick)=\"activateEditMode($event, 'tags')\">\n          <div class=\"caption-text\">\n            {{options?.tags.label}}\n          </div>\n          <div class=\"card-item__body__tags__text card-item__editable card-item__editable--no-padding\" *ngIf=\"options?.tags && isEdit.tags === false\" (dblclick)=\"activateEditMode($event, 'tags')\">\n            {{item[options?.tags.prop]}}\n          </div>\n          <fj-text-input [ngClass]=\"{'card-item__editable__input--hidden' : !isEdit.tags}\"\n                         [focused]=\"isEdit.tags\"\n                         (focus)=\"onInputFocused('tags')\"\n                         (change)=\"onEditElement($event, 'tags')\"\n                         [value]=\"item[options?.tags?.prop]\"\n                         [customStyles]=\"inputFieldStyles\">\n\n          </fj-text-input>\n        </div>\n      </ng-container>\n\n      <!-- custom card content-->\n      <ng-content select=\"[card-item-body]\"></ng-content>\n    </div>\n  </div>\n  <div class=\"card-item__below-menu\" *ngIf=\"options?.belowMenuPrimaryAction || options?.belowMenuOtherActions\" (click)=\"toggleExpanded()\" [ngClass]=\"{'card-item__below-menu--vertical': layout === 'vertical', 'card-item__below-menu--horizontal': layout === 'horizontal'}\" (mouseenter)=\"showBelowMenu = true\" (mouseleave)=\"showBelowMenu = false\">\n    <fj-button\n      (click)=\"onActionClicked($event, options?.belowMenuPrimaryAction.value)\"\n      *ngIf=\"showBelowMenu && options?.belowMenuPrimaryAction\"\n      [margin]=\"'15px'\"\n      [iconPosition]=\"'before'\"\n      [icon]=\"'plus'\"\n      size=\"small\"\n    >\n      {{options?.belowMenuPrimaryAction.label}}\n    </fj-button>\n    <fj-native-dropdown *ngIf=\"showBelowMenu && options?.belowMenuOtherActions\" [options]=\"options?.belowMenuOtherActions\" [customStyles]=\"{'borderColor': 'rgba(27, 81, 160, 1)','width' : '50px'}\" [showDefaultOnCLick]=\"true\" (optionSelected)=\"onActionClicked($event)\"></fj-native-dropdown>\n  </div>\n</div>\n\n<fj-light-box #lightBox [slides]=\"lightBoxImages\"></fj-light-box>\n",
                    styles: ["@charset \"UTF-8\";@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.card-item{width:100%;background-color:transparent}.card-item--vertical{display:flex;margin-bottom:3.75rem;flex-direction:row}.card-item__content{box-shadow:0 .125rem .1875rem 0 rgba(0,0,0,.12);background-color:#fff}.card-item__content--vertical{flex-direction:column;width:15.625rem}.card-item__content--vertical--expanded{width:70vw}.card-item__content--horizontal{flex-direction:row}.card-item__content--highlight{background-color:#f2f2f2}.card-item__header{display:flex;cursor:pointer}.card-item__header--vertical{padding:0 .9375rem .9375rem;display:flex;flex-direction:column}.card-item__header--horizontal{padding:.9375rem;display:flex;flex-direction:row}.card-item__body{padding:.3125rem .3125rem .3125rem .9375rem;display:flex;flex-direction:column}.card-item__body__date{margin-bottom:.9375rem}.card-item__body__details{display:flex;margin-bottom:.9375rem}.card-item__body__details__item{flex:1}.card-item__body__description,.card-item__body__tags{margin-bottom:.9375rem}.card-item__body__tags__text{color:#1b51a0}.card-item__divider{height:.125rem;background-color:#f2f2f2}.card-item__below-menu{position:relative;display:flex;align-items:center;justify-content:center;height:.9375rem;width:auto;z-index:2;cursor:pointer}.card-item__below-menu--vertical{height:unset;width:.9375rem;display:flex;flex-direction:column}.card-item__below-menu:hover{background-color:#ebf2fc}.card-item__picture{display:flex;align-items:center;justify-content:center;background-color:#dce8f9;background-size:cover;background-position-x:50%;background-position-y:50%}.card-item__picture--vertical{height:13.75rem;margin:0 -.9375rem .9375rem}.card-item__picture--horizontal{width:6.25rem;height:6.25rem;margin-right:.9375rem}.card-item__picture:hover{opacity:.7}.card-item__title__container{flex:3}.card-item__title__container--vertical{max-width:18.75rem}.card-item__title__container--horizontal{max-height:6.25rem;margin-right:1.875rem}.card-item__title__heading{cursor:pointer;margin-top:0}.card-item__title__subtext>p{cursor:pointer}.card-item__right__container{flex:1;margin-right:1.875rem;display:flex;flex-direction:column}.card-item__right__container--vertical{min-height:0;margin-bottom:1.875rem}.card-item__right__container--horizontal{min-height:6.25rem}.card-item__right__caption{font-size:16px;color:#666}.card-item__right__link{font-size:16px;cursor:pointer;text-decoration:none;color:#1b51a0}.card-item__right__date{padding:.3125rem}.card-item__actions__container{display:flex;align-items:center;flex-wrap:wrap;flex-direction:row}.card-item__actions__item{margin-right:.3125rem;margin-bottom:.3125rem}.card-item__editable{cursor:pointer;margin:0;padding:.3125rem}.card-item__editable:hover:after{content:\"\u270E\";display:inline-block;padding-right:5px;font-size:13px;color:#000;font-weight:900;-webkit-transform:scale(-1,1);transform:scale(-1,1)}.card-item__editable--no-padding{padding:0}.card-item__editable__input--hidden{display:none}.caption-text{color:#666;font-size:.625rem}"]
                }] }
    ];
    /** @nocollapse */
    CardItemComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CardItemComponent.propDecorators = {
        item: [{ type: Input }],
        options: [{ type: Input }],
        layout: [{ type: Input }],
        isHighlight: [{ type: Input }],
        actionClicked: [{ type: Output }],
        elementEdited: [{ type: Output }],
        lightBox: [{ type: ViewChild, args: [LightBoxComponent,] }]
    };
    return CardItemComponent;
}());

var nextId$6 = 0;
var NativeDropdownComponent = /** @class */ (function (_super) {
    __extends(NativeDropdownComponent, _super);
    function NativeDropdownComponent() {
        var _this = _super.call(this) || this;
        /**
         * options of the dropdown
         */
        _this.options = [];
        /**
         * dropdown id
         */
        _this.id = "fj-native-dd-" + ++nextId$6;
        /**
         * wether or not to show default value after selecting an option
         */
        _this.showDefaultOnCLick = false;
        /**
         * event that is triggered when an option is selected
         */
        _this.optionSelected = new EventEmitter();
        return _this;
    }
    /**
     * function triggered when an option is selected
     * @param evt - mouse click event
     */
    NativeDropdownComponent.prototype.onOptionSelected = function (evt) {
        evt.stopPropagation();
        var dropdownElem = document.getElementById(this.id);
        this.optionSelected.emit(dropdownElem.value);
        if (this.showDefaultOnCLick) {
            // reselect default value
            dropdownElem.value = this.options[0].label;
        }
    };
    /**
     * @param evt - mouse click event
     */
    NativeDropdownComponent.prototype.onDropdownClicked = function (evt) {
        evt.stopPropagation();
    };
    /**
     * @description Add css classes based on inputs like size, shape etc
     */
    NativeDropdownComponent.prototype.generateClassList = function () {
        var _a;
        var baseCls = 'fj-native-dropdown--';
        var classes = (_a = {},
            _a[baseCls + this.size] = this.size,
            _a);
        return classes;
    };
    NativeDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-native-dropdown',
                    template: "<div [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <label\n    [attr.for]=\"id\"\n    class=\"label--medium\"\n    *ngIf=\"label\"\n  >{{label}}</label>\n  <select class=\"fj-native-dropdown\"\n          [ngClass]=\"generateClassList()\"\n          id=\"{{id}}\"\n          (click)=\"onDropdownClicked($event)\"\n          (change)=\"onOptionSelected($event)\"\n          [ngStyle]=\"customStyles\"\n          formControlName=\"{{controlName}}\"\n  >\n    <option *ngFor=\"let option of options\" [ngValue]=\"option.value\">{{option.label}}</option>\n  </select>\n</div>\n<!-- Input without reactive forms-->\n<div *ngIf=\"!formGroup\">\n  <label\n    [attr.for]=\"id\"\n    class=\"label--medium\"\n    *ngIf=\"label\"\n  >{{label}}</label>\n  <select class=\"fj-native-dropdown\"\n          id=\"{{id}}\"\n          [ngClass]=\"generateClassList()\"\n          (click)=\"onDropdownClicked($event)\"\n          (change)=\"onOptionSelected($event)\"\n          [ngStyle]=\"customStyles\"\n  >\n    <option *ngFor=\"let option of options\" value=\"{{option.value}}\">{{option.label}}</option>\n  </select>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-native-dropdown{-moz-appearance:none;-webkit-appearance:none;font-family:OpenSans,sans-serif;font-size:1rem;height:2.5rem;padding:0 .9375rem;background-color:#fff;color:#1b51a0;cursor:pointer}.fj-native-dropdown::-ms-expand{display:none}.fj-native-dropdown:hover{background-color:#f0f8ff}.fj-native-dropdown--large{font-size:1rem;height:3rem;line-height:1.25rem;padding:.875rem 1.25rem}.fj-native-dropdown--medium{font-size:.875rem;height:2.5rem;line-height:1.125rem;padding:.6875rem 1rem}.fj-native-dropdown--small{font-size:.75rem;height:2rem;line-height:1rem;padding:.5rem .75rem}.fj-native-dropdown--micro{font-size:.625rem;height:1.5rem;line-height:.75rem;padding:.375rem .5rem}label{cursor:pointer;font-size:.875rem}label.label--medium{font-size:.75rem;padding-left:.5em}label.label--disabled{color:rgba(0,0,0,.2)}"]
                }] }
    ];
    /** @nocollapse */
    NativeDropdownComponent.ctorParameters = function () { return []; };
    NativeDropdownComponent.propDecorators = {
        options: [{ type: Input }],
        id: [{ type: Input }],
        width: [{ type: Input }],
        showDefaultOnCLick: [{ type: Input }],
        optionSelected: [{ type: Output }],
        error: [{ type: Input }],
        controlName: [{ type: Input }],
        formGroup: [{ type: Input }]
    };
    return NativeDropdownComponent;
}(BaseComponent));

var FjNativeDropdownModule = /** @class */ (function () {
    function FjNativeDropdownModule() {
    }
    FjNativeDropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule
                    ],
                    declarations: [
                        NativeDropdownComponent
                    ],
                    exports: [
                        NativeDropdownComponent
                    ]
                },] }
    ];
    return FjNativeDropdownModule;
}());

var FjLightBoxModule = /** @class */ (function () {
    function FjLightBoxModule() {
    }
    FjLightBoxModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        LightBoxComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        LightBoxComponent
                    ]
                },] }
    ];
    return FjLightBoxModule;
}());

var FjCardItemModule = /** @class */ (function () {
    function FjCardItemModule() {
    }
    FjCardItemModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        IconModule,
                        FjButtonModule,
                        FjLightBoxModule,
                        FjTextInputModule,
                        FjNativeDropdownModule
                    ],
                    exports: [
                        CardItemComponent
                    ],
                    declarations: [CardItemComponent]
                },] }
    ];
    return FjCardItemModule;
}());

var ModalComponent = /** @class */ (function () {
    function ModalComponent(eRef) {
        this.eRef = eRef;
        /**
         * Content of the modal window
         */
        this.modalContent = {};
        /**
         * an output that will be emitted on an action is triggered in the modal
         * @type {EventEmitter<any>}
         */
        this.actionClicked = new EventEmitter();
        /**
         * flag to show or hide the modal
         * @type {boolean}
         */
        this.showModal = false;
    }
    ModalComponent.prototype.ngOnInit = function () {
        if (!this.size) {
            this.size = 'small';
        }
    };
    /**
     * fired when an action has been clicked
     * @param evt - click event
     * @param actionType - type of the action that has been fired
     */
    ModalComponent.prototype.onActionClicked = function (evt, actionType) {
        if (evt.stopPropagation) {
            evt.stopPropagation();
        }
        else {
            actionType = evt;
        }
        this.actionClicked.emit(actionType);
        this.showModal = false;
    };
    /**
     * this function avoid closing the modal when clicking on its content
     * @param evt
     */
    ModalComponent.prototype.modalClicked = function (evt) {
        evt.stopPropagation();
    };
    ModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-modal',
                    template: "<div class=\"modal\" [ngClass]=\"{'modal--hidden': !showModal}\" (click)=\"showModal = false\">\n  <!-- Modal content -->\n  <div class=\"modal__content\" (click)=\"modalClicked($event)\" [ngClass]=\"{'modal__content--big': size === 'big', 'modal__content--small': size === 'small'}\" [ngStyle]=\"customStyles\" >\n    <span class=\"modal__content__close\" (click)=\"onActionClicked($event, 'close')\">&times;</span>\n    <div class=\"modal__content__top\">\n      <h3 *ngIf=\"modalContent.title\" class=\"modal__content__top__title\">{{modalContent.title}}</h3>\n    </div>\n    <div class=\"modal__content__body\">\n      <p *ngIf=\"modalContent.text\">{{modalContent.text}}</p>\n      <ng-content select=\"[modal-content]\"></ng-content>\n    </div>\n    <div class=\"modal__content__bottom\">\n      <fj-button class=\"modal__content__button\" *ngIf=\"modalContent.primaryAction\" (click)=\"onActionClicked($event, 'primary')\">{{modalContent.primaryAction.label}}</fj-button>\n      <fj-button class=\"modal__content__button\" *ngIf=\"modalContent.dangerAction\" (click)=\"onActionClicked($event, 'danger')\" [color]=\"'danger'\">{{modalContent.dangerAction.label}}</fj-button>\n      <fj-button class=\"modal__content__button\" *ngIf=\"modalContent.secondaryAction\" (click)=\"onActionClicked($event, 'secondary')\" [color]=\"'light'\">{{modalContent.secondaryAction.label}}</fj-button>\n    </div>\n  </div>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.modal{position:fixed;z-index:999;left:0;top:0;width:100%;height:100%;background-color:rgba(0,0,0,.4)}.modal--hidden{display:none}.modal__content{position:relative;display:flex;flex-direction:column;background-color:#fff;margin:10% auto;padding:1.5625rem;border:1px solid #888;box-shadow:0 1px 4px 0 rgba(0,0,0,.3)}.modal__content--big{max-width:60%}.modal__content--small{max-width:40%}.modal__content__top{display:flex;align-items:center}.modal__content__top__title{flex:80%;margin:0}.modal__content__body{display:flex;flex-wrap:wrap}.modal__content__bottom{display:flex;flex-direction:row-reverse;flex-wrap:wrap}.modal__content__close{position:absolute;right:.9375rem;top:.4375rem;color:rgba(0,0,0,.45);font-weight:lighter;font-size:20px}.modal__content__close:focus,.modal__content__close:hover{color:#000;text-decoration:none;cursor:pointer}.modal__content__button{margin-right:.3125rem}"]
                }] }
    ];
    /** @nocollapse */
    ModalComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ModalComponent.propDecorators = {
        modalContent: [{ type: Input }],
        size: [{ type: Input }],
        customStyles: [{ type: Input }],
        actionClicked: [{ type: Output }]
    };
    return ModalComponent;
}());

var FjModalModule = /** @class */ (function () {
    function FjModalModule() {
    }
    FjModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FjButtonModule
                    ],
                    exports: [ModalComponent],
                    declarations: [ModalComponent]
                },] }
    ];
    return FjModalModule;
}());

var FjDragAndDropComponent = /** @class */ (function () {
    function FjDragAndDropComponent() {
        this.uploadedDoc = new EventEmitter();
        this.fileToUpload = new EventEmitter();
        this.disabled = false;
        this.showPlaceholder = true;
        this.dropZoneconfig = {
            clickable: '.trigger-upload',
            maxFiles: 1,
            autoReset: null,
            errorReset: null,
            cancelReset: null,
            uploadMultiple: false
        };
    }
    FjDragAndDropComponent.prototype.ngOnInit = function () { };
    FjDragAndDropComponent.prototype.ngOnChanges = function (changes) {
        this.getParentChanges(changes);
    };
    /**
     * @description called on upload error
     * @param args
     */
    FjDragAndDropComponent.prototype.onUploadError = function (args) {
        this.disabled = true;
        return;
    };
    /**
     * @description on drag-start event
     * @param event
     */
    FjDragAndDropComponent.prototype.onFileAdded = function (file) {
        var _this = this;
        this.uploadedFile = file;
        var reader = new FileReader();
        reader.onload = function (event) {
            // event.target.result contains base64 encoded file
            _this.fileToUpload.emit(reader.result);
        };
        try {
            reader.readAsDataURL(file);
        }
        catch (error) { }
        this.uploadedDoc.emit(file);
        this.showPlaceholder = false;
    };
    /**
     * @description - called on file removed from drag-drop area
     * @description - emits null to the parent
     * @param event
     */
    FjDragAndDropComponent.prototype.onFileRemoved = function (event) {
        this.fileToUpload.emit(null);
        this.showPlaceholder = true;
        this.disabled = false;
    };
    /**
     * @description - resets drag-drop area on form submit and modal close events
     * @description - sets showPlaceholder value to (true/false) to position the drop container
     * @param {object} changes - object of type SimpleChanges
     */
    FjDragAndDropComponent.prototype.getParentChanges = function (changes) {
        if (changes.removeFile && changes.removeFile.currentValue) {
            // clear dropzone
            if (this.directiveRef) {
                this.directiveRef.reset();
            }
            this.showPlaceholder = true;
        }
        // Diplay error message if a form is submitted without selecting a file
        if (changes.noFileSelected &&
            changes.noFileSelected.currentValue === true) {
            this.noFileSelected = true;
        }
        else {
            this.noFileSelected = false;
        }
    };
    FjDragAndDropComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-drag-and-drop',
                    template: "<div class=\"dropzone drag-drop\">\n    <div *ngIf=\"noFileSelected && showPlaceholder\">\n        <p class=\"drag-drop__file-missing\">No file is selected</p>\n    </div>\n    <div\n        class=\"dropzone-container trigger-upload\"\n        [dropzone]=\"dropZoneconfig\"\n        [disabled]=\"disabled\"\n        (error)=\"onUploadError($event)\"\n        (addedFile)=\"onFileAdded($event)\"\n        (removedFile)=\"onFileRemoved($event)\"\n    >\n        <div class=\"dropzone-container__placeholder trigger-upload\">\n            <i class=\"dropzone-container__icon-upload icon-document-upload\"></i>\n            <p class=\"dropzone-container__label-dragdrop\">\n               Drag and Drop\n            </p>\n            <p class=\"dropzone-container__label-or\">\n                or\n            </p>\n          <fj-button\n            [icon]=\"'plus'\"\n            [iconMargin]=\"'0 5px 0px 0px'\"\n            [margin]=\"'0px'\"\n            [ghost]=\"true\"\n            [size]=\"'med'\"\n          >\n            Choose a local file\n          </fj-button>\n        </div>\n    </div>\n    <div class=\"drag-drop__updload-info\">\n        <fj-icon svgName=\"attachment\"\n                 fillColor=\"black\" class=\"drag-drop__updload-info-icon\"></fj-icon>\n        <span>Maximum file size is 20MB</span>\n    </div>\n</div>\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.drag-drop{display:flex;flex-direction:column;background-color:#f2f2f2;height:100%;width:100%;padding:1.75rem;box-sizing:border-box}.drag-drop__icon-right{float:right}.drag-drop__icon-right:hover{cursor:pointer}.drag-drop__file-missing{color:#db0000}.drag-drop__updload-info{display:inline-flex;align-items:center;margin-top:1.5625rem;font-size:.875rem;color:rgba(0,0,0,.45)}.drag-drop__updload-info-icon{margin-right:.4375rem}.dropzone-container{flex:1;justify-content:center;align-items:center;overflow:hidden;display:flex;position:relative;width:100%;cursor:pointer;background-color:rgba(0,0,0,.02);border:.0625rem dashed #f2f2f2;border-radius:.25rem;box-sizing:border-box;padding:.3125rem;text-align:center;line-height:.8125rem;transition:.3s}.dropzone-container span{display:block}.dropzone-container__icon-upload{font-size:2.5rem;color:#f2f2f2}.dropzone-container__placeholder{display:block;transition:transform .3s;transition:transform .3s,-webkit-transform .3s}.dropzone-container__label-dragdrop{margin-top:1.5625rem;color:rgba(0,0,0,.6)}.dropzone-container__label-or{color:rgba(0,0,0,.6)}.dropzone-container__btn-icon{margin-right:.5rem}.dropzone-container:hover{border:.0625rem dashed #1b51a0;background-color:#dce8f9}.dropzone-container:hover .dropzone-container__icon-upload{color:#1b51a0}.dropzone-container.dz-drag-hover{border:.0625rem solid #1b51a0;background-color:#dce8f9}.dropzone-container.dz-drag-hover .dropzone-container__placeholder{-webkit-transform:scale(.95);transform:scale(.95)}.dropzone-container.dz-drag-hover i{color:#1b51a0}"]
                }] }
    ];
    /** @nocollapse */
    FjDragAndDropComponent.ctorParameters = function () { return []; };
    FjDragAndDropComponent.propDecorators = {
        componentRef: [{ type: ViewChild, args: [DropzoneComponent,] }],
        directiveRef: [{ type: ViewChild, args: [DropzoneDirective,] }],
        uploadedDoc: [{ type: Output }],
        fileToUpload: [{ type: Output }],
        removeFile: [{ type: Input }],
        noFileSelected: [{ type: Input }]
    };
    return FjDragAndDropComponent;
}());

var DEFAULT_DROPZONE_CONFIGURATIONS = {
    url: '/',
    maxFiles: 1,
    dictDefaultMessage: '',
    createImageThumbnails: true,
    acceptedFiles: 'image/*, .pdf, .doc, .docx'
};
var ɵ0 = DEFAULT_DROPZONE_CONFIGURATIONS;
var FjDragAndDropModule = /** @class */ (function () {
    function FjDragAndDropModule() {
    }
    FjDragAndDropModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FjDragAndDropComponent],
                    imports: [
                        CommonModule,
                        DropzoneModule,
                        FjButtonModule,
                        IconModule
                    ],
                    exports: [FjDragAndDropComponent, DropzoneModule],
                    providers: [
                        {
                            provide: DROPZONE_CONFIG,
                            useValue: ɵ0
                        }
                    ]
                },] }
    ];
    return FjDragAndDropModule;
}());

var moment = moment_;
var DatePickerComponent = /** @class */ (function (_super) {
    __extends(DatePickerComponent, _super);
    function DatePickerComponent() {
        var _this = _super.call(this) || this;
        // public currentOptions: DatePickerOptions;
        _this.labelText = '';
        _this.controlName = '';
        _this.inputPlaceholder = '';
        _this.errors = '';
        _this.options = {};
        _this.disabled = false;
        _this.icon = true;
        _this.border = true;
        _this.padding = true;
        _this.timePicker = false;
        _this.timeLabel = 'Time';
        _this.required = false;
        _this.dateTime = null;
        /**
         * To Apply forceful error state to input component
         */
        _this.errored = false;
        _this.timePickerToggle = true;
        _this.dateIsOpen = false;
        _this.timeFocus = false;
        _this.myOptions = {
            dateFormat: 'dd.mm.yyyy',
        };
        _this.dateChangeValue = new EventEmitter();
        _this.dateChangeEvent = new EventEmitter();
        return _this;
    }
    DatePickerComponent.prototype.ngOnInit = function () {
        this.Date = this.formGroup.value["" + this.controlName];
    };
    /**
     * called from the host click, toggles the date picker and prevents picker hiding when clicked on the header elements
     * @param evt - mouse event
     */
    DatePickerComponent.prototype.toggleCalendar = function (evt) {
        evt.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.ngxdp.toggleCalendar();
        var elem = document.querySelector('ngx-my-date-picker .header');
        if (elem) {
            elem.addEventListener('click', function (event) { return event.stopPropagation(); });
        }
    };
    /**
     * @description Fires when the date field change.
     * @param event IMDateModel - structured datetime.
     */
    DatePickerComponent.prototype.onDateChanged = function (event) {
        if (event.jsdate) {
            this.Date = event.jsdate.toString();
        }
        else {
            this.Date = '';
        }
        // emit date change event to parent with true value
        this.dateChangeEvent.emit(true);
        // emit date change event to parent with event
        this.dateChangeValue.emit(event);
    };
    // clear the date of the date picker;
    DatePickerComponent.prototype.clearDate = function () {
        this.ngxdp.clearDate();
        this.timePickerToggle = true;
        this.formGroup.controls["" + this.controlName].setValue(null);
    };
    DatePickerComponent.prototype.calendarToggle = function (event) {
        this.dateIsOpen = event === 1;
    };
    Object.defineProperty(DatePickerComponent.prototype, "Date", {
        /**
         * @public Date
         * @type {string}
         * @method get
         * @description gets the date part of this.dateTime as a formatted string.
         * @returns {string} - formatted date or empty string if no this.dateTime.
         */
        get: function () {
            if (this.dateTime) {
                if (this.timePicker) {
                    this.timePickerToggle = false;
                }
                return moment(this.dateTime).format('DD.MM.YYYY');
            }
            else {
                if (this.timePicker) {
                    this.timePickerToggle = true;
                }
                return '';
            }
        },
        /**
         * @public Date
         * @type {date}
         * @method set
         * @description sets the datetime to the form.
         * @param {string} datetime - string of formatted DATE part of a datetime.
         */
        set: function (datetime) {
            if (!datetime) {
                this.dateTime = '';
                if (this.timePicker) {
                    this.timePickerToggle = true;
                }
            }
            else {
                this.dateTime = new Date(datetime);
                this.formGroup.controls["" + this.controlName].setValue(this.dateTime);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    DatePickerComponent.prototype.generateClassList = function () {
        var _a;
        var classes = (_a = {},
            _a['fj-input--' + this.size] = this.size,
            _a['fj-input--required'] = this.required,
            _a['fj-input--error'] = this.errored,
            _a);
        return classes;
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fj-date-picker',
                    template: "<div class=\"fj-datepicker\" [ngClass]=\"generateClassList()\"  [formGroup]=\"formGroup\" *ngIf=\"formGroup\">\n  <label\n    [attr.for]=\"id\"\n    class=\"label--medium\"\n    *ngIf=\"label\"\n  >{{label}}</label>\n  <div class=\"fj-datepicker__container\">\n    <input\n      class=\"fj-datepicker__container__input\"\n      ngx-mydatepicker\n      #dp=\"ngx-mydatepicker\"\n      [options]=\"myOptions\"\n      [defaultMonth]=\"myDefaultMonth\"\n      (calendarToggle)=\"calendarToggle($event)\"\n      (dateChanged)=\"onDateChanged($event)\"\n      (click)=\"toggleCalendar($event)\"\n      [ngStyle]= \"customStyles\"\n      [disabled]=\"disabled\"\n      [attr.name]=\"id\"\n      [placeholder]=\"placeholder\"\n      [attr.value]=\"fileCreateDate ? fileCreateDate : Date\"\n    />\n    <fj-icon svgName=\"calendar\"\n             (click)=\"toggleCalendar($event)\"\n             *ngIf=\"!disabled\"\n             [fillColor]=\"'gray-light'\"\n             class=\"fj-datepicker__container__icon\"\n    >\n    </fj-icon>\n  </div>\n</div>\n",
                    styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}:host{cursor:pointer}.fj-datepicker__container__icon{float:left;margin-top:.75rem;margin-left:-2.1875rem}.fj-datepicker__container__input{box-sizing:border-box;border:.0625rem solid rgba(0,0,0,.15);border-radius:.25rem;color:#000;display:block;font-size:.95rem;font-weight:500;height:2.5rem;margin-top:.25em;margin-right:.3125rem;outline:0;padding:.5625rem .75rem;float:left;transition:.2s linear}.fj-datepicker__container__input:focus{border-color:#1b51a0}.fj-datepicker__container__input:hover{color:rgba(0,0,0,.6)}.fj-datepicker__container__input::-webkit-input-placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-datepicker__container__input::-ms-input-placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-datepicker__container__input::placeholder{color:rgba(0,0,0,.6);font-weight:100}.fj-datepicker__container__input::-webkit-input-placeholder:hover .fj-datepicker__container__input::-webkit-input-placeholder{color:rgba(0,0,0,.6)}.fj-datepicker__container__input::-ms-input-placeholder:hover .fj-datepicker__container__input::-ms-input-placeholder{color:rgba(0,0,0,.6)}.fj-datepicker__container__input::placeholder:hover .fj-datepicker__container__input::placeholder{color:rgba(0,0,0,.6)}.fj-datepicker__container__input:disabled{background-color:#f2f2f2;border-color:#f2f2f2;cursor:not-allowed}.fj-datepicker__container__input:disabled::-webkit-input-placeholder{color:rgba(0,0,0,.2)}.fj-datepicker__container__input:disabled::-ms-input-placeholder{color:rgba(0,0,0,.2)}.fj-datepicker__container__input:disabled::placeholder{color:rgba(0,0,0,.2)}.fj-datepicker__container__input--small{height:2rem;font-size:.875rem;padding:.5625rem .625rem}.fj-datepicker__container__input--micro{height:1.5rem;font-size:.75rem;padding:.5625rem .5rem}.fj-datepicker__container__input--error{border-color:#db0000}.fj-datepicker__container__input--required:after{content:\" *\"}label{cursor:pointer;font-size:.875rem}label.label--medium{font-size:.75rem;padding-left:.5em}label.label--disabled{color:rgba(0,0,0,.2)}.input-error{color:#db0000;font-size:.75rem;padding:.5em}.error--label{font-size:.75rem;padding-left:.5em;color:#db0000}/deep/ ngx-my-date-picker .ngxmdp{position:absolute}/deep/ ngx-my-date-picker .ngxmdp .currmonth,/deep/ ngx-my-date-picker .ngxmdp .header,/deep/ ngx-my-date-picker .ngxmdp .headerbtn,/deep/ ngx-my-date-picker .ngxmdp .headerbtncell,/deep/ ngx-my-date-picker .ngxmdp .headerlabelbtn,/deep/ ngx-my-date-picker .ngxmdp .weekdaytitle{background-color:#fff}/deep/ ngx-my-date-picker .ngxmdp .weekdaytitle{padding-top:.875rem;padding-bottom:.875rem;color:#1b51a0;font-weight:600}/deep/ ngx-my-date-picker .ngxmdp .currmonth,/deep/ ngx-my-date-picker .ngxmdp .daycell,/deep/ ngx-my-date-picker .ngxmdp .highlight{color:rgba(0,0,0,.15);font-weight:500}/deep/ ngx-my-date-picker .ngxmdp .tablesingleday:hover,/deep/ ngx-my-date-picker .ngxmdp .tablesinglemonth:hover,/deep/ ngx-my-date-picker .ngxmdp .tablesingleyear:hover{background-color:#1b51a0;border-radius:.25rem}/deep/ ngx-my-date-picker .ngxmdp .tablesingleday:hover .currmonth,/deep/ ngx-my-date-picker .ngxmdp .tablesinglemonth:hover .currmonth,/deep/ ngx-my-date-picker .ngxmdp .tablesingleyear:hover .currmonth{color:#fff}/deep/ ngx-my-date-picker .ngxmdp .selectedday .datevalue{background-color:#1b51a0!important;color:#fff}/deep/ ngx-my-date-picker .ngxmdp .selector{padding:.3125rem;left:-9.375rem;background:#fff;border-color:rgba(0,0,0,.125)}/deep/ ngx-my-date-picker .ngxmdp .selector:focus{border-color:rgba(0,0,0,.125);box-shadow:0 2px 5px 0 rgba(0,0,0,.15)}/deep/ ngx-my-date-picker .ngxmdp .selectorarrow:focus:before{border-bottom-color:rgba(0,0,0,.125)}/deep/ ngx-my-date-picker .ngxmdp .selectorarrow:after{border-bottom-color:#fff}/deep/ ngx-my-date-picker .markcurrday,/deep/ ngx-my-date-picker markcurrmonth{text-decoration:none}"]
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return []; };
    DatePickerComponent.propDecorators = {
        labelText: [{ type: Input }],
        formGroup: [{ type: Input }],
        controlName: [{ type: Input }],
        inputPlaceholder: [{ type: Input }],
        id: [{ type: Input }],
        errors: [{ type: Input }],
        options: [{ type: Input }],
        disabled: [{ type: Input }],
        icon: [{ type: Input }],
        border: [{ type: Input }],
        padding: [{ type: Input }],
        formOfOrigin: [{ type: Input }],
        timePicker: [{ type: Input }],
        timeLabel: [{ type: Input }],
        required: [{ type: Input }],
        error: [{ type: Input }],
        dateTime: [{ type: Input }],
        fileCreateDate: [{ type: Input }],
        customStyles: [{ type: Input }],
        errored: [{ type: Input }],
        ngxdp: [{ type: ViewChild, args: ['dp',] }],
        myDefaultMonth: [{ type: Input }],
        myOptions: [{ type: Input }],
        dateChangeValue: [{ type: Output }],
        dateChangeEvent: [{ type: Output }]
    };
    return DatePickerComponent;
}(BaseComponent));

var DatePickerService = /** @class */ (function () {
    function DatePickerService() {
        this.getProgramDirectEntryCalendarStartDate = new Subject();
        this.getEditProgramCalendarStartDate = new Subject();
        this.getEditActivityCalendarStartDate = new Subject();
        this.getApprovalCalendarStartDate = new Subject();
        this.getCreateMilestoneCalendarStartDate = new Subject();
    }
    //  Method set disableUntil Start date value until yesterday
    DatePickerService.prototype.disableUntil = function (options) {
        var d = new Date();
        d.setDate(d.getDate() - 1);
        var copy = this.getCopyOfOptions(options);
        copy.disableUntil = {
            year: d.getFullYear(),
            month: d.getMonth() + 1,
            day: d.getDate()
        };
        var myOptions = copy;
        return myOptions;
    };
    // Returns copy of myOptions for the Date
    DatePickerService.prototype.getCopyOfOptions = function (options) {
        return JSON.parse(JSON.stringify(options));
    };
    DatePickerService.prototype.getEndDateCalendar = function (date, options) {
        var myEndDateOptions = this.getCopyOfOptions(options);
        myEndDateOptions.disableUntil = date;
        myEndDateOptions.todayBtnTxt = 'End Date';
        return myEndDateOptions;
    };
    DatePickerService.prototype.getStartDate = function (date, form) {
        try {
            var formatedDate = {
                year: date.split('.')[2],
                month: date.split('.')[1],
                day: date.split('.')[0]
            };
            if (form === 'edit_program_form') {
                this.editProgramSartDate = formatedDate;
                this.getEditProgramCalendarStartDate.next(this.editProgramSartDate);
            }
            if (form === 'edit_activity_form') {
                this.editActivitySartDate = formatedDate;
                this.getEditActivityCalendarStartDate.next(this.editActivitySartDate);
            }
            if (form === 'approval_form') {
                this.approvalStartDate = formatedDate;
                this.getApprovalCalendarStartDate.next(this.approvalStartDate);
            }
            if (form === 'create_milestone_form') {
                this.createMilestoneStartDate = formatedDate;
                this.getCreateMilestoneCalendarStartDate.next(this.createMilestoneStartDate);
            }
            if (form === 'program_direct_entry_form') {
                this.programDirectEntryStartDate = formatedDate;
                this.getProgramDirectEntryCalendarStartDate.next(this.programDirectEntryStartDate);
            }
            return true;
        }
        catch (error) {
            return false;
        }
    };
    DatePickerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatePickerService.ctorParameters = function () { return []; };
    return DatePickerService;
}());

var FjDatePickerModule = /** @class */ (function () {
    function FjDatePickerModule() {
    }
    FjDatePickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        NgxMyDatePickerModule,
                        ReactiveFormsModule,
                        IconModule
                    ],
                    providers: [DatePickerService, NgxMyDatePickerConfig],
                    exports: [DatePickerComponent],
                    declarations: [DatePickerComponent]
                },] }
    ];
    return FjDatePickerModule;
}());

/*
 * Public API Surface of freyja-test
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DatePickerService as ɵd, BaseComponent as ɵb, IconBaseComponent as ɵa, IconRegistryService as ɵc, FreyjaService, FreyjaComponent, FreyjaModule, ButtonComponent, FjButtonModule, CheckboxComponent, FjCheckboxModule, RadioButtonComponent, FjRadioButtonModule, CheckboxGridComponent, CheckboxGridModule, NumberInputComponent, FjNumberInputModule, TextInputComponent, FjTextInputModule, SvgIconComponent, FjSvgIconModule, AccordionComponent, FjAccordionModule, ContentSwitcherComponent, FjContentSwitcherModule, CardItemComponent, FjCardItemModule, NativeDropdownComponent, FjNativeDropdownModule, ModalComponent, FjModalModule, IconComponent, IconModule, FjDragAndDropComponent, FjDragAndDropModule, ɵ0, DatePickerComponent, FjDatePickerModule, LightBoxComponent, FjLightBoxModule };

//# sourceMappingURL=freyja-ui.js.map