// Angular Imports
import { Component, Input, Output, EventEmitter } from '@angular/core';
// Internal Imports
import { BaseComponent } from '../shared/base.component';
/**
 * Counter for Next Id
 */
let nextId = 0;
/**
 * Freyja Accordion Component according to specifics of Freyja Design
 */
export class AccordionComponent extends BaseComponent {
    constructor() {
        super();
        // This is to make component open state controlled
        this.isOpen = false;
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        this.id = `fj-accordion-${++nextId}`;
        /**
         * Will emit if open state get's changed on click
         */
        this.change = new EventEmitter(false);
    }
    /**
     * Will determine if acordion is expanded or not
     */
    get open() {
        return this.isOpen;
    }
    set open(val) {
        if (val !== this.isOpen) {
            this.isOpen = this.coerceBooleanInput(val);
        }
    }
    /**
     * Will toggle open state and emit on Change event
     * @param evt HTML Click Event
     */
    toggleState(evt) {
        evt.stopPropagation();
        this.open = !this.open;
        this.change.emit(this.open);
    }
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    generateClassList() {
        const base = 'fj-accordion--';
        const classes = {
            [`${base}open`]: this.open,
            [`${base}disabled`]: this.disabled,
            [`${base}label-after`]: this.labelPosition === 'after'
        };
        return classes;
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'fj-accordion',
                template: "<div class=\"fj-accordion\"\n     [id]=\"id\"\n     [ngClass]=\"generateClassList()\">\n  <div class=\"fj-accordion__header\"\n       (click)=\"toggleState($event)\">\n    <label>{{label}}</label>\n  </div>\n  <div class=\"fj-accordion__content\">\n    <ng-content></ng-content>\n  </div>\n</div>",
                styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-accordion label{display:block;font-weight:700;padding-bottom:.6875rem;padding-top:.6875rem;transition:.2s linear;cursor:pointer}.fj-accordion label::before{border-right:1px solid;border-top:1px solid;content:'';display:inline-block;height:6px;margin:0 1rem 0 .25rem;-webkit-transform:rotate(45deg);transform:rotate(45deg);-webkit-transform-origin:80% 40%;transform-origin:80% 40%;transition:.2s linear;width:6px}.fj-accordion__header{display:flex;cursor:pointer}.fj-accordion__content{max-height:0;opacity:0;overflow:hidden;padding:0 1.25rem;transition:.2s linear .1s;border:1px solid rgba(0,0,0,.15)}.fj-accordion--disabled{color:rgba(0,0,0,.25);pointer-events:none}.fj-accordion--open .fj-accordion__content{max-height:15em;opacity:1;overflow:auto;padding:.6875rem 1.25rem}.fj-accordion--open label::before{-webkit-transform:rotate(135deg);transform:rotate(135deg)}.fj-accordion--label-after>div{justify-content:flex-end}"]
            }] }
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [];
AccordionComponent.propDecorators = {
    id: [{ type: Input }],
    open: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2ZyZXlqYS11aS8iLCJzb3VyY2VzIjpbImxpYi9hY2NvcmRpb24vYWNjb3JkaW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0I7QUFDbEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxtQkFBbUI7QUFDbkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3pEOztHQUVHO0FBQ0gsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRWY7O0dBRUc7QUFNSCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsYUFBYTtJQTZCbkQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQTNCVixrREFBa0Q7UUFDMUMsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUV2Qjs7V0FFRztRQUNNLE9BQUUsR0FBRyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQWV6Qzs7V0FFRztRQUNPLFdBQU0sR0FBMEIsSUFBSSxZQUFZLENBQVUsS0FBSyxDQUFDLENBQUM7SUFJM0UsQ0FBQztJQXBCRDs7T0FFRztJQUNILElBQ0ksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsR0FBWTtRQUNuQixJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQVdEOzs7T0FHRztJQUNILFdBQVcsQ0FBQyxHQUFHO1FBQ2IsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUFFLENBQUM7SUFFakM7O09BRUc7SUFDSSxpQkFBaUI7UUFDdEIsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFDOUIsTUFBTSxPQUFPLEdBQUc7WUFDZCxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUMxQixDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNsQyxDQUFDLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxLQUFLLE9BQU87U0FDdkQsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7OztZQTFERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLG9UQUF5Qzs7YUFFMUM7Ozs7O2lCQVVFLEtBQUs7bUJBS0wsS0FBSztxQkFhTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhciBJbXBvcnRzXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBJbnRlcm5hbCBJbXBvcnRzXG5pbXBvcnQgeyBCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vc2hhcmVkL2Jhc2UuY29tcG9uZW50JztcblxuXG4vKipcbiAqIENvdW50ZXIgZm9yIE5leHQgSWRcbiAqL1xubGV0IG5leHRJZCA9IDA7XG5cbi8qKlxuICogRnJleWphIEFjY29yZGlvbiBDb21wb25lbnQgYWNjb3JkaW5nIHRvIHNwZWNpZmljcyBvZiBGcmV5amEgRGVzaWduXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZqLWFjY29yZGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY2NvcmRpb24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9hY2NvcmRpb24uY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuXG4gIC8vIFRoaXMgaXMgdG8gbWFrZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBjb250cm9sbGVkXG4gIHByaXZhdGUgaXNPcGVuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgdW5pcXVlIElEIG9yIGl0IHdpbGwgdXNlIGF1dG8gZ2VuZXJhdGVkIGZyb20gY291bnRlclxuICAgKi9cbiAgQElucHV0KCkgaWQgPSBgZmotYWNjb3JkaW9uLSR7KytuZXh0SWR9YDtcblxuICAvKipcbiAgICogV2lsbCBkZXRlcm1pbmUgaWYgYWNvcmRpb24gaXMgZXhwYW5kZWQgb3Igbm90XG4gICAqL1xuICBASW5wdXQoKVxuICBnZXQgb3BlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc09wZW47XG4gIH1cbiAgc2V0IG9wZW4odmFsOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbCAhPT0gdGhpcy5pc09wZW4pIHtcbiAgICAgIHRoaXMuaXNPcGVuID0gdGhpcy5jb2VyY2VCb29sZWFuSW5wdXQodmFsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2lsbCBlbWl0IGlmIG9wZW4gc3RhdGUgZ2V0J3MgY2hhbmdlZCBvbiBjbGlja1xuICAgKi9cbiAgQE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPihmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaWxsIHRvZ2dsZSBvcGVuIHN0YXRlIGFuZCBlbWl0IG9uIENoYW5nZSBldmVudFxuICAgKiBAcGFyYW0gZXZ0IEhUTUwgQ2xpY2sgRXZlbnRcbiAgICovXG4gIHRvZ2dsZVN0YXRlKGV2dCk6IHZvaWQge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLm9wZW4gPSAhdGhpcy5vcGVuO1xuICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5vcGVuKTsgIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgY2xhc3NlcyB1c2luZyBCRU0gYXBwcmFvY2ggYW5kIGJpbmQgdG8gbmdDbGFzc1xuICAgKi9cbiAgcHVibGljIGdlbmVyYXRlQ2xhc3NMaXN0KCkge1xuICAgIGNvbnN0IGJhc2UgPSAnZmotYWNjb3JkaW9uLS0nO1xuICAgIGNvbnN0IGNsYXNzZXMgPSB7XG4gICAgICBbYCR7YmFzZX1vcGVuYF06IHRoaXMub3BlbixcbiAgICAgIFtgJHtiYXNlfWRpc2FibGVkYF06IHRoaXMuZGlzYWJsZWQsXG4gICAgICBbYCR7YmFzZX1sYWJlbC1hZnRlcmBdOiB0aGlzLmxhYmVsUG9zaXRpb24gPT09ICdhZnRlcidcbiAgICB9O1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG59XG4iXX0=