// Angular Imports
import { Component, Input, Output, EventEmitter } from '@angular/core';
// Internal Imports
import { BaseComponent } from '../shared/base.component';
/**
 * Count for Next Id
 */
let nextId = 0;
/**
 * Freyja CheckBox Component according to specifics of Freyja Design
 */
export class CheckboxComponent extends BaseComponent {
    constructor() {
        super();
        // This is to make component controlled
        this.checkedVal = false;
        this.indeterminateVal = false;
        /**
         * Provide unique ID or it will use auto generated from counter
         */
        this.id = `fj-checkbox-${++nextId}`;
        /**
         * on change event, will be emitted once user clicks on checkbox to change value
         */
        this.change = new EventEmitter(false);
    }
    /**
     * will determine indeterminate state of checkbox
     */
    get indeterminate() {
        return this.indeterminateVal;
    }
    set indeterminate(val) {
        this.indeterminateVal = this.coerceBooleanInput(val);
    }
    /**
     * Will determin initial checked state of checkbox
     */
    get checked() {
        return this.checkedVal;
    }
    set checked(v) {
        if (v !== this.checkedVal) {
            this.checkedVal = this.coerceBooleanInput(v);
        }
    }
    /**
     * capture on click and toggle state of checkbox
     * @param event emitted by html element on click
     */
    onCheckboxClicked(event) {
        event.stopPropagation();
        this.toggle();
    }
    /**
     * stop event propagation by capturing it
     * @param event html event
     */
    onChangeEvent(event) {
        event.stopPropagation();
    }
    /**
     * Generate classes using BEM appraoch and bind to ngClass
     */
    generateClassList() {
        const base = 'fj-checkbox--';
        const classes = {
            [`${base}label-before`]: this.labelPosition === 'before',
            [`${base}disabled`]: this.disabled,
            [`${base}indeterminate`]: this.indeterminate
        };
        return classes;
    }
    /**
     * Toggle state of checked value and emit on change
     */
    toggle() {
        this.checked = !this.checked;
        this.change.emit(this.checkedVal);
    }
}
CheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'fj-checkbox',
                template: "<label [attr.for]=\"id\"\n       class=\"fj-checkbox\"\n       [ngClass]=\"generateClassList()\">\n  <input class=\"fj-checkbox__input\"\n         type=\"checkbox\"\n         [id]=\"id\"\n         [required]=\"required\"\n         [checked]=\"checked\"\n         [disabled]=\"disabled\"\n         [attr.name]=\"name\"\n         [tabIndex]=\"tabIndex\"\n         [indeterminate]=\"indeterminate\"\n         [attr.aria-label]=\"ariaLabel || null\"\n         [attr.aria-labelledby]=\"ariaLabelledby\"\n         (change)=\"onChangeEvent($event)\"\n         (click)=\"onCheckboxClicked($event)\">\n  <span class=\"fj-checkbox-label\">\n    <ng-content></ng-content>\n  </span>\n</label>",
                styles: ["@font-face{font-family:open-sans;font-weight:400;src:url(/assets/fonts/OpenSans-Regular.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Regular.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Regular.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Regular.svg#open-sans) format(\"svg\")}@font-face{font-family:open-sans;font-weight:600;src:url(/assets/fonts/OpenSans-Bold.eot?) format(\"eot\"),url(/assets/fonts/OpenSans-Bold.woff) format(\"woff\"),url(/assets/fonts/OpenSans-Bold.ttf) format(\"truetype\"),url(/assets/fonts/OpenSans-Bold.svg#open-sans) format(\"svg\")}.fj-checkbox{display:inline-flex;cursor:pointer;white-space:nowrap;align-items:center;margin-right:.5625rem}.fj-checkbox__input{display:inline-block;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;height:1.125rem;outline:0;position:relative;width:1.125rem;margin-right:.5625rem}.fj-checkbox__input::before{display:block;position:absolute;top:0;left:0;background-color:transparent;border:.0625rem solid #1b51a0;border-radius:.125rem;content:'';height:1rem;transition:.1s linear;width:1rem}.fj-checkbox__input::after{border-bottom:.125rem solid #fff;border-radius:.0625rem;border-right:.125rem solid #fff;content:'';display:block;height:.5625rem;left:.375rem;opacity:0;position:absolute;top:.125rem;-webkit-transform:rotate(45deg);transform:rotate(45deg);width:.25rem}.fj-checkbox__input:active::before,.fj-checkbox__input:focus::before,.fj-checkbox__input:hover::before{background-color:#dce8f9}.fj-checkbox__input:checked::before{background-color:#1b51a0}.fj-checkbox__input:checked::after{opacity:1}.fj-checkbox__input:checked:active::before,.fj-checkbox__input:checked:focus::before,.fj-checkbox__input:checked:hover::before{background-color:#7596c5}.fj-checkbox__input:disabled{opacity:.4;cursor:default}.fj-checkbox__input:disabled::after{background-color:transparent;border-color:#000}.fj-checkbox__input:disabled:checked::before{background-color:rgba(0,0,0,.15)}.fj-checkbox__input:indeterminate::after{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.fj-checkbox--label-before .fj-checkbox-input{order:1;margin-left:.5625rem}.fj-checkbox--disabled{opacity:.5;cursor:auto}"]
            }] }
];
/** @nocollapse */
CheckboxComponent.ctorParameters = () => [];
CheckboxComponent.propDecorators = {
    id: [{ type: Input }],
    indeterminate: [{ type: Input }],
    change: [{ type: Output }],
    checked: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZnJleWphLXVpLyIsInNvdXJjZXMiOlsibGliL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0I7QUFDbEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxtQkFBbUI7QUFDbkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXpEOztHQUVHO0FBQ0gsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRWY7O0dBRUc7QUFNSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTtJQXVDbEQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQXRDVix1Q0FBdUM7UUFDL0IsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFFakM7O1dBRUc7UUFDTSxPQUFFLEdBQUcsZUFBZSxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBWXhDOztXQUVHO1FBQ08sV0FBTSxHQUEwQixJQUFJLFlBQVksQ0FBVSxLQUFLLENBQUMsQ0FBQztJQWlCM0UsQ0FBQztJQS9CRDs7T0FFRztJQUNILElBQ0ksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFJLGFBQWEsQ0FBQyxHQUFZO1FBQzVCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQU9EOztPQUVHO0lBQ0gsSUFDSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFDRCxJQUFJLE9BQU8sQ0FBQyxDQUFVO1FBQ3BCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDO0lBS0Q7OztPQUdHO0lBQ0gsaUJBQWlCLENBQUMsS0FBWTtRQUM1QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxhQUFhLENBQUMsS0FBWTtRQUN4QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUJBQWlCO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQztRQUM3QixNQUFNLE9BQU8sR0FBRztZQUNkLENBQUMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLEtBQUssUUFBUTtZQUN4RCxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNsQyxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUM3QyxDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTTtRQUNYLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7WUFuRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixxckJBQXdDOzthQUV6Qzs7Ozs7aUJBVUUsS0FBSzs0QkFJTCxLQUFLO3FCQVdMLE1BQU07c0JBS04sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIgSW1wb3J0c1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gSW50ZXJuYWwgSW1wb3J0c1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCB9IGZyb20gJy4uL3NoYXJlZC9iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQ291bnQgZm9yIE5leHQgSWRcbiAqL1xubGV0IG5leHRJZCA9IDA7XG5cbi8qKlxuICogRnJleWphIENoZWNrQm94IENvbXBvbmVudCBhY2NvcmRpbmcgdG8gc3BlY2lmaWNzIG9mIEZyZXlqYSBEZXNpZ25cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZmotY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jaGVja2JveC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG5cbiAgLy8gVGhpcyBpcyB0byBtYWtlIGNvbXBvbmVudCBjb250cm9sbGVkXG4gIHByaXZhdGUgY2hlY2tlZFZhbCA9IGZhbHNlO1xuICBwcml2YXRlIGluZGV0ZXJtaW5hdGVWYWwgPSBmYWxzZTtcblxuICAvKipcbiAgICogUHJvdmlkZSB1bmlxdWUgSUQgb3IgaXQgd2lsbCB1c2UgYXV0byBnZW5lcmF0ZWQgZnJvbSBjb3VudGVyXG4gICAqL1xuICBASW5wdXQoKSBpZCA9IGBmai1jaGVja2JveC0keysrbmV4dElkfWA7XG4gIC8qKlxuICAgKiB3aWxsIGRldGVybWluZSBpbmRldGVybWluYXRlIHN0YXRlIG9mIGNoZWNrYm94XG4gICAqL1xuICBASW5wdXQoKVxuICBnZXQgaW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pbmRldGVybWluYXRlVmFsO1xuICB9XG4gIHNldCBpbmRldGVybWluYXRlKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuaW5kZXRlcm1pbmF0ZVZhbCA9IHRoaXMuY29lcmNlQm9vbGVhbklucHV0KHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogb24gY2hhbmdlIGV2ZW50LCB3aWxsIGJlIGVtaXR0ZWQgb25jZSB1c2VyIGNsaWNrcyBvbiBjaGVja2JveCB0byBjaGFuZ2UgdmFsdWVcbiAgICovXG4gIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBXaWxsIGRldGVybWluIGluaXRpYWwgY2hlY2tlZCBzdGF0ZSBvZiBjaGVja2JveFxuICAgKi9cbiAgQElucHV0KClcbiAgZ2V0IGNoZWNrZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tlZFZhbDtcbiAgfVxuICBzZXQgY2hlY2tlZCh2OiBib29sZWFuKSB7XG4gICAgaWYgKHYgIT09IHRoaXMuY2hlY2tlZFZhbCkge1xuICAgICAgdGhpcy5jaGVja2VkVmFsID0gdGhpcy5jb2VyY2VCb29sZWFuSW5wdXQodik7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICAvKipcbiAgICogY2FwdHVyZSBvbiBjbGljayBhbmQgdG9nZ2xlIHN0YXRlIG9mIGNoZWNrYm94XG4gICAqIEBwYXJhbSBldmVudCBlbWl0dGVkIGJ5IGh0bWwgZWxlbWVudCBvbiBjbGlja1xuICAgKi9cbiAgb25DaGVja2JveENsaWNrZWQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy50b2dnbGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdG9wIGV2ZW50IHByb3BhZ2F0aW9uIGJ5IGNhcHR1cmluZyBpdFxuICAgKiBAcGFyYW0gZXZlbnQgaHRtbCBldmVudFxuICAgKi9cbiAgb25DaGFuZ2VFdmVudChldmVudDogRXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBjbGFzc2VzIHVzaW5nIEJFTSBhcHByYW9jaCBhbmQgYmluZCB0byBuZ0NsYXNzXG4gICAqL1xuICBwdWJsaWMgZ2VuZXJhdGVDbGFzc0xpc3QoKSB7XG4gICAgY29uc3QgYmFzZSA9ICdmai1jaGVja2JveC0tJztcbiAgICBjb25zdCBjbGFzc2VzID0ge1xuICAgICAgW2Ake2Jhc2V9bGFiZWwtYmVmb3JlYF06IHRoaXMubGFiZWxQb3NpdGlvbiA9PT0gJ2JlZm9yZScsXG4gICAgICBbYCR7YmFzZX1kaXNhYmxlZGBdOiB0aGlzLmRpc2FibGVkLFxuICAgICAgW2Ake2Jhc2V9aW5kZXRlcm1pbmF0ZWBdOiB0aGlzLmluZGV0ZXJtaW5hdGVcbiAgICB9O1xuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSBzdGF0ZSBvZiBjaGVja2VkIHZhbHVlIGFuZCBlbWl0IG9uIGNoYW5nZVxuICAgKi9cbiAgcHVibGljIHRvZ2dsZSgpIHtcbiAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5jaGVja2VkVmFsKTtcbiAgfVxufVxuIl19