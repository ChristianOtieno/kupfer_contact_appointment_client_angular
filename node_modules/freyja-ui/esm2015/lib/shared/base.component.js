// Angular Imports
import { Input } from '@angular/core';
/**
 * @description Common set of inputs and methods to be used in all Freyja Components
 */
export class BaseComponent {
    constructor() {
        this._disabled = false;
        /**
         * If component will take full width of it's container
         */
        this.fullWidth = false;
        /**
         * label position, if it will appear before or after content
         */
        this.labelPosition = 'after';
        /**
       * Size can be micro, small, medium or large
       */
        this.size = 'medium';
        /**
         * Placeholder for HTML input elements
         */
        this.placeholder = '';
        /**
         * if component value is required in a form
         */
        this.required = false;
    }
    /**
     * If component will be disabled, setter/getter to support approach like below
     * <fj-comp disabled></fj-comp>
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(v) {
        this._disabled = this.coerceBooleanInput(v);
    }
    /**
     * @description coerce an inout value into boolean
     * @param val an input value which will be coearced into a boolean value
     */
    coerceBooleanInput(val) {
        return !!val || val === '';
    }
}
BaseComponent.propDecorators = {
    customStyles: [{ type: Input }],
    name: [{ type: Input }],
    margin: [{ type: Input }],
    disabled: [{ type: Input }],
    fullWidth: [{ type: Input }],
    label: [{ type: Input }],
    labelPosition: [{ type: Input }],
    size: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    tabIndex: [{ type: Input }],
    ariaLabel: [{ type: Input, args: ['aria-label',] }],
    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],
    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9mcmV5amEtdWkvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL2Jhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQjtBQUNsQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWE7SUFBMUI7UUFDUyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBMEJ6Qjs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFPM0I7O1dBRUc7UUFDTSxrQkFBYSxHQUF1QixPQUFPLENBQUM7UUFFbkQ7O1NBRUM7UUFDTSxTQUFJLEdBQTJDLFFBQVEsQ0FBQztRQUVqRTs7V0FFRztRQUNNLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRTFCOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztJQW1DNUIsQ0FBQztJQTFFQzs7O09BR0c7SUFDSCxJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksUUFBUSxDQUFDLENBQVU7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQXlERDs7O09BR0c7SUFDSCxrQkFBa0IsQ0FBQyxHQUFRO1FBQ3pCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUssRUFBRSxDQUFDO0lBQzdCLENBQUM7OzsyQkFuRkEsS0FBSzttQkFJTCxLQUFLO3FCQUtMLEtBQUs7dUJBS0wsS0FBSzt3QkFVTCxLQUFLO29CQUtMLEtBQUs7NEJBS0wsS0FBSzttQkFLTCxLQUFLOzBCQUtMLEtBQUs7dUJBS0wsS0FBSzt1QkFLTCxLQUFLO3dCQUtMLEtBQUssU0FBQyxZQUFZOzZCQU1sQixLQUFLLFNBQUMsaUJBQWlCOzhCQUt2QixLQUFLLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhciBJbXBvcnRzXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBDb21tb24gc2V0IG9mIGlucHV0cyBhbmQgbWV0aG9kcyB0byBiZSB1c2VkIGluIGFsbCBGcmV5amEgQ29tcG9uZW50c1xuICovXG5leHBvcnQgY2xhc3MgQmFzZUNvbXBvbmVudCB7XG4gIHB1YmxpYyBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogY3VzdG9tIHN0eWxlcyBvYmplY3QgZm9yIHRoZSBidXR0b25cbiAgICovXG4gIEBJbnB1dCgpIGN1c3RvbVN0eWxlcztcbiAgLyoqXG4gICAqIE5hbWUgaW5wdXQsIGNvbW1vbmx5IHVzZWQgdG8gaWRlbnRpZnkgZm9ybSB2YWx1ZVxuICAgKi9cbiAgQElucHV0KCkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gTWFyZ2luIGZvciBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIG1hcmdpbjogc3RyaW5nO1xuICAvKipcbiAgICogSWYgY29tcG9uZW50IHdpbGwgYmUgZGlzYWJsZWQsIHNldHRlci9nZXR0ZXIgdG8gc3VwcG9ydCBhcHByb2FjaCBsaWtlIGJlbG93XG4gICAqIDxmai1jb21wIGRpc2FibGVkPjwvZmotY29tcD5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cbiAgc2V0IGRpc2FibGVkKHY6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IHRoaXMuY29lcmNlQm9vbGVhbklucHV0KHYpO1xuICB9XG4gIC8qKlxuICAgKiBJZiBjb21wb25lbnQgd2lsbCB0YWtlIGZ1bGwgd2lkdGggb2YgaXQncyBjb250YWluZXJcbiAgICovXG4gIEBJbnB1dCgpIGZ1bGxXaWR0aCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBsYWJlbCB0byBiZSB1c2VkIGluIHRleHQgaW5wdXQgZXRjXG4gICAqL1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBsYWJlbCBwb3NpdGlvbiwgaWYgaXQgd2lsbCBhcHBlYXIgYmVmb3JlIG9yIGFmdGVyIGNvbnRlbnRcbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsUG9zaXRpb246ICdiZWZvcmUnIHwgJ2FmdGVyJyA9ICdhZnRlcic7XG5cbiAgICAvKipcbiAgICogU2l6ZSBjYW4gYmUgbWljcm8sIHNtYWxsLCBtZWRpdW0gb3IgbGFyZ2VcbiAgICovXG4gIEBJbnB1dCgpIHNpemU6ICdtaWNybycgfCAnc21hbGwnIHwgJ21lZGl1bScgfCAnbGFyZ2UnID0gJ21lZGl1bSc7XG5cbiAgLyoqXG4gICAqIFBsYWNlaG9sZGVyIGZvciBIVE1MIGlucHV0IGVsZW1lbnRzXG4gICAqL1xuICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xuXG4gIC8qKlxuICAgKiBpZiBjb21wb25lbnQgdmFsdWUgaXMgcmVxdWlyZWQgaW4gYSBmb3JtXG4gICAqL1xuICBASW5wdXQoKSByZXF1aXJlZCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUYWJJbmRleCBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBASW5wdXQoKSB0YWJJbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBhcmlhLWxhYmVsIGF0dHJpYnV0ZSBvZiB0aGUgaG9zdCBlbGVtZW50XG4gICAqL1xuICBASW5wdXQoJ2FyaWEtbGFiZWwnKSBhcmlhTGFiZWw6IHN0cmluZztcblxuICAvKipcbiAgICogYXJpYS1sYWJlbGxlZGJ5IGF0dHJpYnV0ZSBmb3IgZWxlbWVudCwgdXN1YWxseSB1c2VkIGluIGlucHV0IGVsZW1lbnRcbiAgICovXG5cbiAgQElucHV0KCdhcmlhLWxhYmVsbGVkYnknKSBhcmlhTGFiZWxsZWRieTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbnB1dCBhdHRyaWJ1dGUgZm9yIEFjY2Vzc2liaWxpdHlcbiAgICovXG4gIEBJbnB1dCgnYXJpYS1kZXNjcmliZWRieScpIGFyaWFEZXNjcmliZWRieTogc3RyaW5nO1xuXG5cblxuICBwdWJsaWMgc3R5bGU6IG9iamVjdCB8IHN0cmluZztcbiAgcHVibGljIGNsYXNzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBjb2VyY2UgYW4gaW5vdXQgdmFsdWUgaW50byBib29sZWFuXG4gICAqIEBwYXJhbSB2YWwgYW4gaW5wdXQgdmFsdWUgd2hpY2ggd2lsbCBiZSBjb2VhcmNlZCBpbnRvIGEgYm9vbGVhbiB2YWx1ZVxuICAgKi9cbiAgY29lcmNlQm9vbGVhbklucHV0KHZhbDogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdmFsIHx8IHZhbCA9PT0gJyc7XG4gIH1cbn1cbiJdfQ==