import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
export class DatePickerService {
    constructor() {
        this.getProgramDirectEntryCalendarStartDate = new Subject();
        this.getEditProgramCalendarStartDate = new Subject();
        this.getEditActivityCalendarStartDate = new Subject();
        this.getApprovalCalendarStartDate = new Subject();
        this.getCreateMilestoneCalendarStartDate = new Subject();
    }
    //  Method set disableUntil Start date value until yesterday
    disableUntil(options) {
        const d = new Date();
        d.setDate(d.getDate() - 1);
        const copy = this.getCopyOfOptions(options);
        copy.disableUntil = {
            year: d.getFullYear(),
            month: d.getMonth() + 1,
            day: d.getDate()
        };
        const myOptions = copy;
        return myOptions;
    }
    // Returns copy of myOptions for the Date
    getCopyOfOptions(options) {
        return JSON.parse(JSON.stringify(options));
    }
    getEndDateCalendar(date, options) {
        const myEndDateOptions = this.getCopyOfOptions(options);
        myEndDateOptions.disableUntil = date;
        myEndDateOptions.todayBtnTxt = 'End Date';
        return myEndDateOptions;
    }
    getStartDate(date, form) {
        try {
            const formatedDate = {
                year: date.split('.')[2],
                month: date.split('.')[1],
                day: date.split('.')[0]
            };
            if (form === 'edit_program_form') {
                this.editProgramSartDate = formatedDate;
                this.getEditProgramCalendarStartDate.next(this.editProgramSartDate);
            }
            if (form === 'edit_activity_form') {
                this.editActivitySartDate = formatedDate;
                this.getEditActivityCalendarStartDate.next(this.editActivitySartDate);
            }
            if (form === 'approval_form') {
                this.approvalStartDate = formatedDate;
                this.getApprovalCalendarStartDate.next(this.approvalStartDate);
            }
            if (form === 'create_milestone_form') {
                this.createMilestoneStartDate = formatedDate;
                this.getCreateMilestoneCalendarStartDate.next(this.createMilestoneStartDate);
            }
            if (form === 'program_direct_entry_form') {
                this.programDirectEntryStartDate = formatedDate;
                this.getProgramDirectEntryCalendarStartDate.next(this.programDirectEntryStartDate);
            }
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
DatePickerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatePickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2ZyZXlqYS11aS8iLCJzb3VyY2VzIjpbImxpYi9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUkvQixNQUFNLE9BQU8saUJBQWlCO0lBYTVCO1FBTkEsMkNBQXNDLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDMUUsb0NBQStCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDbkUscUNBQWdDLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDcEUsaUNBQTRCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDaEUsd0NBQW1DLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7SUFFdkQsQ0FBQztJQUVqQiw0REFBNEQ7SUFDNUQsWUFBWSxDQUFDLE9BQU87UUFDbEIsTUFBTSxDQUFDLEdBQVEsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNsQixJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUNyQixLQUFLLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7WUFDdkIsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUU7U0FDakIsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQztRQUV2QixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQseUNBQXlDO0lBQ3pDLGdCQUFnQixDQUFDLE9BQU87UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sa0JBQWtCLENBQUMsSUFBSSxFQUFFLE9BQU87UUFDckMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsZ0JBQWdCLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNyQyxnQkFBZ0IsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzFDLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSTtRQUNyQixJQUFJO1lBQ0YsTUFBTSxZQUFZLEdBQUc7Z0JBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEIsQ0FBQztZQUNGLElBQUksSUFBSSxLQUFLLG1CQUFtQixFQUFFO2dCQUNoQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsWUFBWSxDQUFDO2dCQUN4QyxJQUFJLENBQUMsK0JBQStCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsSUFBSSxJQUFJLEtBQUssb0JBQW9CLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxZQUFZLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7YUFDdkU7WUFDRCxJQUFJLElBQUksS0FBSyxlQUFlLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxZQUFZLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDaEU7WUFDRCxJQUFJLElBQUksS0FBSyx1QkFBdUIsRUFBRTtnQkFDcEMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLFlBQVksQ0FBQztnQkFDN0MsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQzthQUM5RTtZQUNELElBQUksSUFBSSxLQUFLLDJCQUEyQixFQUFFO2dCQUN4QyxJQUFJLENBQUMsMkJBQTJCLEdBQUcsWUFBWSxDQUFDO2dCQUNoRCxJQUFJLENBQUMsc0NBQXNDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2FBQ3BGO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FFYjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7OztZQTVFRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJTmd4TXlEcE9wdGlvbnMgfSBmcm9tICduZ3gtbXlkYXRlcGlja2VyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERhdGVQaWNrZXJTZXJ2aWNlIHtcblxuICBlZGl0UHJvZ3JhbVNhcnREYXRlOiBhbnk7XG4gIGVkaXRBY3Rpdml0eVNhcnREYXRlOiBhbnk7XG4gIGFwcHJvdmFsU3RhcnREYXRlOiBhbnk7XG4gIGNyZWF0ZU1pbGVzdG9uZVN0YXJ0RGF0ZTogYW55O1xuICBwcm9ncmFtRGlyZWN0RW50cnlTdGFydERhdGU6IGFueTtcbiAgZ2V0UHJvZ3JhbURpcmVjdEVudHJ5Q2FsZW5kYXJTdGFydERhdGU6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgZ2V0RWRpdFByb2dyYW1DYWxlbmRhclN0YXJ0RGF0ZTogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICBnZXRFZGl0QWN0aXZpdHlDYWxlbmRhclN0YXJ0RGF0ZTogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICBnZXRBcHByb3ZhbENhbGVuZGFyU3RhcnREYXRlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIGdldENyZWF0ZU1pbGVzdG9uZUNhbGVuZGFyU3RhcnREYXRlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvLyAgTWV0aG9kIHNldCBkaXNhYmxlVW50aWwgU3RhcnQgZGF0ZSB2YWx1ZSB1bnRpbCB5ZXN0ZXJkYXlcbiAgZGlzYWJsZVVudGlsKG9wdGlvbnMpIHtcbiAgICBjb25zdCBkOiBhbnkgPSBuZXcgRGF0ZSgpO1xuICAgIGQuc2V0RGF0ZShkLmdldERhdGUoKSAtIDEpO1xuICAgIGNvbnN0IGNvcHkgPSB0aGlzLmdldENvcHlPZk9wdGlvbnMob3B0aW9ucyk7XG4gICAgY29weS5kaXNhYmxlVW50aWwgPSB7XG4gICAgICB5ZWFyOiBkLmdldEZ1bGxZZWFyKCksXG4gICAgICBtb250aDogZC5nZXRNb250aCgpICsgMSxcbiAgICAgIGRheTogZC5nZXREYXRlKClcbiAgICB9O1xuICAgIGNvbnN0IG15T3B0aW9ucyA9IGNvcHk7XG5cbiAgICByZXR1cm4gbXlPcHRpb25zO1xuICB9XG5cbiAgLy8gUmV0dXJucyBjb3B5IG9mIG15T3B0aW9ucyBmb3IgdGhlIERhdGVcbiAgZ2V0Q29weU9mT3B0aW9ucyhvcHRpb25zKTogSU5neE15RHBPcHRpb25zIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RW5kRGF0ZUNhbGVuZGFyKGRhdGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBteUVuZERhdGVPcHRpb25zID0gdGhpcy5nZXRDb3B5T2ZPcHRpb25zKG9wdGlvbnMpO1xuICAgIG15RW5kRGF0ZU9wdGlvbnMuZGlzYWJsZVVudGlsID0gZGF0ZTtcbiAgICBteUVuZERhdGVPcHRpb25zLnRvZGF5QnRuVHh0ID0gJ0VuZCBEYXRlJztcbiAgICByZXR1cm4gbXlFbmREYXRlT3B0aW9ucztcbiAgfVxuXG4gIGdldFN0YXJ0RGF0ZShkYXRlLCBmb3JtKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZvcm1hdGVkRGF0ZSA9IHtcbiAgICAgICAgeWVhcjogZGF0ZS5zcGxpdCgnLicpWzJdLFxuICAgICAgICBtb250aDogZGF0ZS5zcGxpdCgnLicpWzFdLFxuICAgICAgICBkYXk6IGRhdGUuc3BsaXQoJy4nKVswXVxuICAgICAgfTtcbiAgICAgIGlmIChmb3JtID09PSAnZWRpdF9wcm9ncmFtX2Zvcm0nKSB7XG4gICAgICAgIHRoaXMuZWRpdFByb2dyYW1TYXJ0RGF0ZSA9IGZvcm1hdGVkRGF0ZTtcbiAgICAgICAgdGhpcy5nZXRFZGl0UHJvZ3JhbUNhbGVuZGFyU3RhcnREYXRlLm5leHQodGhpcy5lZGl0UHJvZ3JhbVNhcnREYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChmb3JtID09PSAnZWRpdF9hY3Rpdml0eV9mb3JtJykge1xuICAgICAgICB0aGlzLmVkaXRBY3Rpdml0eVNhcnREYXRlID0gZm9ybWF0ZWREYXRlO1xuICAgICAgICB0aGlzLmdldEVkaXRBY3Rpdml0eUNhbGVuZGFyU3RhcnREYXRlLm5leHQodGhpcy5lZGl0QWN0aXZpdHlTYXJ0RGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZm9ybSA9PT0gJ2FwcHJvdmFsX2Zvcm0nKSB7XG4gICAgICAgIHRoaXMuYXBwcm92YWxTdGFydERhdGUgPSBmb3JtYXRlZERhdGU7XG4gICAgICAgIHRoaXMuZ2V0QXBwcm92YWxDYWxlbmRhclN0YXJ0RGF0ZS5uZXh0KHRoaXMuYXBwcm92YWxTdGFydERhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm0gPT09ICdjcmVhdGVfbWlsZXN0b25lX2Zvcm0nKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlTWlsZXN0b25lU3RhcnREYXRlID0gZm9ybWF0ZWREYXRlO1xuICAgICAgICB0aGlzLmdldENyZWF0ZU1pbGVzdG9uZUNhbGVuZGFyU3RhcnREYXRlLm5leHQodGhpcy5jcmVhdGVNaWxlc3RvbmVTdGFydERhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm0gPT09ICdwcm9ncmFtX2RpcmVjdF9lbnRyeV9mb3JtJykge1xuICAgICAgICB0aGlzLnByb2dyYW1EaXJlY3RFbnRyeVN0YXJ0RGF0ZSA9IGZvcm1hdGVkRGF0ZTtcbiAgICAgICAgdGhpcy5nZXRQcm9ncmFtRGlyZWN0RW50cnlDYWxlbmRhclN0YXJ0RGF0ZS5uZXh0KHRoaXMucHJvZ3JhbURpcmVjdEVudHJ5U3RhcnREYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19