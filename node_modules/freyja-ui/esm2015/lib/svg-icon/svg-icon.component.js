// Angular Imports
import { Component, Input, ElementRef, ViewEncapsulation } from '@angular/core';
import { take } from 'rxjs/operators';
// Internal Imports
import { IconRegistryService } from './icon-registry.service';
import { BaseComponent } from '../shared/base.component';
/**
 * Freyja SVG ICON Component according to specifics of Freyja Design
 */
export class SvgIconComponent extends BaseComponent {
    /**
     * Capture reference to element ref to inject svg into html
     * @param _iconRegistryService Icon Registry service to pull and cache icons
     * @param _elementRef Reference to Component HTML to inject SVG
     */
    constructor(_iconRegistryService, _elementRef) {
        super();
        this._iconRegistryService = _iconRegistryService;
        this._elementRef = _elementRef;
        /**
         * Name of icon or svg file to be pulled from cdn/repository
         */
        this.svgName = '';
        /**
         * If it's going to be inline to other content
         */
        this.inline = true;
        this.iconClass = '';
        this.fillColor = '#BFBFBF';
        this.display = 'inline-flex';
        this.opacity = 1;
    }
    /**
     * Load Icon SCG from Service
     */
    ngOnInit() {
        this.loadSvgIconByName();
    }
    /**
     * Method to call registry service to get icon svg
     */
    loadSvgIconByName() {
        if (this.svgName) {
            this._iconRegistryService.addSvgIcon(this.svgName).pipe(take(1)).subscribe(svg => this.insertSvgElement(svg), (err) => console.log(`Error retrieving icon: ${err.message}`));
        }
    }
    /**
     * Insert SVG content to component nativeElement
     * @param svg SVG content for icon fetch from service
     */
    insertSvgElement(svg) {
        this.clearSvgElement();
        this._elementRef.nativeElement.appendChild(svg);
    }
    /**
     * Clear Component SVG before inserting
     */
    clearSvgElement() {
        const layoutElement = this._elementRef.nativeElement;
        const childCount = layoutElement.childNodes.length;
        for (let i = 0; i < childCount; i++) {
            layoutElement.removeChild(layoutElement.childNodes[i]);
        }
    }
    /**
     * Capture on change and update classes
     */
    ngOnChanges() {
        this.generateClass();
    }
    /**
     * @description Generates the class for the icon
     */
    generateClass() {
        this.class = `${this.iconClass} `
            + `${this.fillColor ? 'icon--fill--' + this.fillColor : ''} `
            + `${this.strokeColor ? 'icon--stroke--' + this.strokeColor : ''}`;
    }
}
SvgIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'fj-svg-icon',
                template: "",
                encapsulation: ViewEncapsulation.None,
                styles: ["svg{width:24px;height:24px}"]
            }] }
];
/** @nocollapse */
SvgIconComponent.ctorParameters = () => [
    { type: IconRegistryService },
    { type: ElementRef }
];
SvgIconComponent.propDecorators = {
    svgName: [{ type: Input }],
    inline: [{ type: Input }],
    iconClass: [{ type: Input }],
    width: [{ type: Input }],
    fillColor: [{ type: Input }],
    strokeColor: [{ type: Input }],
    display: [{ type: Input }],
    opacity: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vZnJleWphLXVpLyIsInNvdXJjZXMiOlsibGliL3N2Zy1pY29uL3N2Zy1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0I7QUFDbEIsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQWEsVUFBVSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25HLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0QyxtQkFBbUI7QUFDbkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXpEOztHQUVHO0FBT0gsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGFBQWE7SUFtQmpEOzs7O09BSUc7SUFDSCxZQUFvQixvQkFBeUMsRUFDcEQsV0FBdUI7UUFDNUIsS0FBSyxFQUFFLENBQUM7UUFGUSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXFCO1FBQ3BELGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBdkJoQzs7V0FFRztRQUNNLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFFdEI7O1dBRUc7UUFDTSxXQUFNLEdBQVksSUFBSSxDQUFDO1FBRXZCLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFFZixjQUFTLEdBQUcsU0FBUyxDQUFDO1FBRXRCLFlBQU8sR0FBRyxhQUFhLENBQUM7UUFDeEIsWUFBTyxHQUFHLENBQUMsQ0FBQztJQVVuQixDQUFDO0lBRUg7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ssaUJBQWlCO1FBQ3ZCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUN4RSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFDakMsQ0FBQyxHQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUNyRSxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBR0Q7OztPQUdHO0lBQ0ssZ0JBQWdCLENBQUMsR0FBZTtRQUN0QyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsTUFBTSxhQUFhLEdBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO1FBQ2xFLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBRW5ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFHRDs7T0FFRztJQUNJLGFBQWE7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUc7Y0FDN0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHO2NBQzNELEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDdkUsQ0FBQzs7O1lBNUZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsWUFBd0M7Z0JBRXhDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN0Qzs7OztZQVhRLG1CQUFtQjtZQUprQixVQUFVOzs7c0JBcUJyRCxLQUFLO3FCQUtMLEtBQUs7d0JBRUwsS0FBSztvQkFDTCxLQUFLO3dCQUNMLEtBQUs7MEJBQ0wsS0FBSztzQkFDTCxLQUFLO3NCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyIEltcG9ydHNcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT25DaGFuZ2VzLCBFbGVtZW50UmVmLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gSW50ZXJuYWwgSW1wb3J0c1xuaW1wb3J0IHsgSWNvblJlZ2lzdHJ5U2VydmljZSB9IGZyb20gJy4vaWNvbi1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9zaGFyZWQvYmFzZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIEZyZXlqYSBTVkcgSUNPTiBDb21wb25lbnQgYWNjb3JkaW5nIHRvIHNwZWNpZmljcyBvZiBGcmV5amEgRGVzaWduXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZqLXN2Zy1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N2Zy1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3ZnLWljb24uY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgU3ZnSWNvbkNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgaWNvbiBvciBzdmcgZmlsZSB0byBiZSBwdWxsZWQgZnJvbSBjZG4vcmVwb3NpdG9yeVxuICAgKi9cbiAgQElucHV0KCkgc3ZnTmFtZSA9ICcnO1xuXG4gIC8qKlxuICAgKiBJZiBpdCdzIGdvaW5nIHRvIGJlIGlubGluZSB0byBvdGhlciBjb250ZW50XG4gICAqL1xuICBASW5wdXQoKSBpbmxpbmU6IEJvb2xlYW4gPSB0cnVlO1xuXG4gIEBJbnB1dCgpIGljb25DbGFzcyA9ICcnO1xuICBASW5wdXQoKSB3aWR0aDogbnVtYmVyO1xuICBASW5wdXQoKSBmaWxsQ29sb3IgPSAnI0JGQkZCRic7XG4gIEBJbnB1dCgpIHN0cm9rZUNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGRpc3BsYXkgPSAnaW5saW5lLWZsZXgnO1xuICBASW5wdXQoKSBvcGFjaXR5ID0gMTtcblxuICAvKipcbiAgICogQ2FwdHVyZSByZWZlcmVuY2UgdG8gZWxlbWVudCByZWYgdG8gaW5qZWN0IHN2ZyBpbnRvIGh0bWxcbiAgICogQHBhcmFtIF9pY29uUmVnaXN0cnlTZXJ2aWNlIEljb24gUmVnaXN0cnkgc2VydmljZSB0byBwdWxsIGFuZCBjYWNoZSBpY29uc1xuICAgKiBAcGFyYW0gX2VsZW1lbnRSZWYgUmVmZXJlbmNlIHRvIENvbXBvbmVudCBIVE1MIHRvIGluamVjdCBTVkdcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2ljb25SZWdpc3RyeVNlcnZpY2U6IEljb25SZWdpc3RyeVNlcnZpY2UsXG4gICAgcHVibGljIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICBzdXBlcigpO1xuICAgIH1cblxuICAvKipcbiAgICogTG9hZCBJY29uIFNDRyBmcm9tIFNlcnZpY2VcbiAgICovXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubG9hZFN2Z0ljb25CeU5hbWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gY2FsbCByZWdpc3RyeSBzZXJ2aWNlIHRvIGdldCBpY29uIHN2Z1xuICAgKi9cbiAgcHJpdmF0ZSBsb2FkU3ZnSWNvbkJ5TmFtZSgpIHtcbiAgICBpZiAodGhpcy5zdmdOYW1lKSB7XG4gICAgICB0aGlzLl9pY29uUmVnaXN0cnlTZXJ2aWNlLmFkZFN2Z0ljb24odGhpcy5zdmdOYW1lKS5waXBlKHRha2UoMSkpLnN1YnNjcmliZShcbiAgICAgICAgc3ZnID0+IHRoaXMuaW5zZXJ0U3ZnRWxlbWVudChzdmcpLFxuICAgICAgICAoZXJyOiBFcnJvcikgPT4gY29uc29sZS5sb2coYEVycm9yIHJldHJpZXZpbmcgaWNvbjogJHtlcnIubWVzc2FnZX1gKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBJbnNlcnQgU1ZHIGNvbnRlbnQgdG8gY29tcG9uZW50IG5hdGl2ZUVsZW1lbnRcbiAgICogQHBhcmFtIHN2ZyBTVkcgY29udGVudCBmb3IgaWNvbiBmZXRjaCBmcm9tIHNlcnZpY2VcbiAgICovXG4gIHByaXZhdGUgaW5zZXJ0U3ZnRWxlbWVudChzdmc6IFNWR0VsZW1lbnQpIHtcbiAgICB0aGlzLmNsZWFyU3ZnRWxlbWVudCgpO1xuXG4gICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgQ29tcG9uZW50IFNWRyBiZWZvcmUgaW5zZXJ0aW5nXG4gICAqL1xuICBwcml2YXRlIGNsZWFyU3ZnRWxlbWVudCgpIHtcbiAgICBjb25zdCBsYXlvdXRFbGVtZW50OiBIVE1MRWxlbWVudCA9IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBjaGlsZENvdW50ID0gbGF5b3V0RWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICBsYXlvdXRFbGVtZW50LnJlbW92ZUNoaWxkKGxheW91dEVsZW1lbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhcHR1cmUgb24gY2hhbmdlIGFuZCB1cGRhdGUgY2xhc3Nlc1xuICAgKi9cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5nZW5lcmF0ZUNsYXNzKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gR2VuZXJhdGVzIHRoZSBjbGFzcyBmb3IgdGhlIGljb25cbiAgICovXG4gIHB1YmxpYyBnZW5lcmF0ZUNsYXNzKCkge1xuICAgIHRoaXMuY2xhc3MgPSBgJHt0aGlzLmljb25DbGFzc30gYFxuICAgICAgKyBgJHt0aGlzLmZpbGxDb2xvciA/ICdpY29uLS1maWxsLS0nICsgdGhpcy5maWxsQ29sb3IgOiAnJ30gYFxuICAgICAgKyBgJHt0aGlzLnN0cm9rZUNvbG9yID8gJ2ljb24tLXN0cm9rZS0tJyArIHRoaXMuc3Ryb2tlQ29sb3IgOiAnJ31gO1xuICB9XG5cbn1cbiJdfQ==