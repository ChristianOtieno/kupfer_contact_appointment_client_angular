import { Injectable, Optional, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { of as observableOf } from 'rxjs';
import { finalize, map, share, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/platform-browser";
const CLOUD_CDN_URL = 'https://storage.googleapis.com/svgicons';
class SvgIcon {
    constructor(data) {
        if (!!data.nodeName) {
            this.svgElement = data;
        }
        else {
            this.url = data;
        }
    }
}
export class IconRegistryService {
    constructor(httpClient, sanitizer) {
        this.httpClient = httpClient;
        this.sanitizer = sanitizer;
        this.svgIcons = new Map();
        this.inProgressUrlFetches = new Map();
    }
    loadSvgIconFromConfig(config) {
        return this.fetchUrl(config.url)
            .pipe(map(svgText => this.createSvgElementForSingleIcon(svgText)));
    }
    createSvgElementForSingleIcon(responseText) {
        const svg = this.svgElementFromString(responseText);
        svg.setAttribute('fit', '');
        svg.setAttribute('height', '100%');
        svg.setAttribute('width', '100%');
        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        svg.setAttribute('focusable', 'false');
        return svg;
    }
    svgElementFromString(str) {
        const div = document.createElement('DIV');
        div.innerHTML = str;
        const svg = div.querySelector('svg');
        if (!svg) {
            throw Error('<svg> tag not found');
        }
        return svg;
    }
    fetchUrl(safeUrl) {
        const url = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
        const inProgressFetch = this.inProgressUrlFetches.get(url);
        if (inProgressFetch) {
            return inProgressFetch;
        }
        const req = this.httpClient.get(url, {
            responseType: 'text', headers: new HttpHeaders({
                'Access-Control-Allow-Origin': '*'
            })
        }).pipe(finalize(() => this.inProgressUrlFetches.delete(url)), share());
        this.inProgressUrlFetches.set(url, req);
        return req;
    }
    addSvgIcon(iconName) {
        const url = this.sanitizer.bypassSecurityTrustResourceUrl(`${CLOUD_CDN_URL}/${iconName}.svg`);
        this.svgIcons.set(iconName, new SvgIcon(url));
        return this.getNamedSvgIcon(iconName);
    }
    getNamedSvgIcon(name) {
        const config = this.svgIcons.get(name);
        if (config) {
            if (config.svgElement) {
                return observableOf(cloneSvg(config.svgElement));
            }
            else {
                return this.loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));
            }
        }
    }
}
IconRegistryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IconRegistryService.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Optional }] },
    { type: DomSanitizer }
];
IconRegistryService.ngInjectableDef = i0.defineInjectable({ factory: function IconRegistryService_Factory() { return new IconRegistryService(i0.inject(i1.HttpClient, 8), i0.inject(i2.DomSanitizer)); }, token: IconRegistryService, providedIn: "root" });
function cloneSvg(svg) {
    return svg.cloneNode(true);
}
//# sourceMappingURL=data:application/json;base64,